#pragma once
#include <windows.h>
#include <string>
namespace Instalog { namespace SystemFacades {

	/// <remarks>Represents the root of Windows API errors.</remarks>
	class Win32Exception : public std::exception
	{
	protected:
		/// <summary>Disallows normal construction of this class by clients.
		/// </summary>
		/// <remarks>Clients should use the ThrowWindowsApiException member
		/// to create an instance of this class.</remarks>
		Win32Exception() {};
	public:
		/// <summary>Throws a specific error code generated by GetLastError()
		/// </summary>
		static void Throw(DWORD lastError);
		/// <summary>Throws a WindowsApiException based on the last error.</summary>
		static void ThrowFromLastError() { Throw(::GetLastError()); };
		static void ThrowFromNtError(NTSTATUS errorCode);
		/// <summary>Returns the Winerror.h error code for the exception.</summary>
		virtual DWORD GetErrorCode() const = 0;
		/// <summary>Returns a wide character string of the current Windows API
		/// exception as defined by the system.</summary>
		/// <remarks>This API uses the FormatMessageW API with the
		/// FORMAT_MESSAGE_FROM_SYSTEM flag.</remarks>
		virtual std::wstring GetWideMessage() const;
		/// <summary>Returns a normal character string of the current Windows API
		/// exception as defined by the system.</summary>
		/// <remarks>This API uses the FormatMessageA API with the
		/// FORMAT_MESSAGE_FROM_SYSTEM flag.</remarks>
		virtual std::string GetCharMessage() const;
		/// <summary>An alias for the benefit of inheritance from std::exception.
		/// </summary>
		/// <remarks>This member is not thread safe. It uses GetCharMessage() for
		/// it's implementation.</remarks>
		virtual const char* what() const
		{
			static std::string buff;
			buff = GetCharMessage();
			return buff.c_str();
		};
	};

	/// <remarks>The general exception class instantiated whenever a more specific
	/// exception type is not known.</remarks>
	class GenericException : public Win32Exception
	{
		friend class Win32Exception;
		DWORD errorCode;
		/// <summary>Private constructor used by WindowsApiException only.</summary>
		GenericException(DWORD errorCode_) : errorCode(errorCode_) {};
	public:
		/// <summary>Returns the error code from which this Exception was instantiated.</summary>
		DWORD GetErrorCode() const { return errorCode; };
	};

	/// <remarks>The exception returned when ERROR_SUCCESS is encountered.</remarks>
	struct ErrorSuccessException : public Win32Exception
	{
		DWORD GetErrorCode() const { return ERROR_SUCCESS; };
	};

	/// <remarks>The exception returned when ERROR_FILE_NOT_FOUND is encountered.</remarks>
	struct ErrorFileNotFoundException : public Win32Exception
	{
		DWORD GetErrorCode() const { return ERROR_FILE_NOT_FOUND; };
	};

	/// <remarks>The exception returned when ERROR_ACCESS_DENIED is encountered.</remarks>
	struct ErrorAccessDeniedException : public Win32Exception
	{
		DWORD GetErrorCode() const { return ERROR_ACCESS_DENIED; };
	};

	/// <remarks>The exception returned when ERROR_ALREADY_EXISTS is encountered.</remarks>
	struct ErrorAlreadyExistsException : public Win32Exception
	{
		DWORD GetErrorCode() const { return ERROR_ALREADY_EXISTS; };
	};

	struct ErrorPathNotFoundException : public Win32Exception
	{
		DWORD GetErrorCode() const { return ERROR_PATH_NOT_FOUND; };
	};

	struct ErrorInvalidParameterException : public Win32Exception
	{
		DWORD GetErrorCode() const { return ERROR_INVALID_PARAMETER; };
	};

	struct ErrorModuleNotFoundException : public Win32Exception
	{
		DWORD GetErrorCode() const { return ERROR_MOD_NOT_FOUND; };
	};

}}
