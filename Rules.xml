<?xml version="1.0" encoding="utf-8"?>
<Rules version="20120223">

	<!--
		AtomineerUtils Rules
		====================

		This Xml file provides the default rules for the output that AtomineerUtils generates.

		User customisations
		===================
		You can add custom rules and templates to control the layout of comment blocks and the
		auto-doc text that is generated for different code elements.

		This file provides the AtomineerUtils defaults. Although you can edit this file directly
		to gain extensive control over the formatting and content of the documentation comments
		generated by AtomineerUtils, note that when upgrading you will need to merge your changes
		into the latest version of Rules.xml, which can be rather tedious.

		To alleviate this, AtomineerUtils Pro users can create a new file alongside this one for
		each main section of this file (UserVariables, DocXmlTemplates, DoxygenTemplates, and each
		of the AutoDoc categories) - For example, "UserVariables.xml" or "Methods.xml", with a
		format like the block it customises, e.g.:
			<UserVariables>
				<Variable name="customVariable" value="123"/>
			</UserVariables>

		If AtomineerUtils finds such an XML file, it will import it so that the commands it
		contains are executed before the defaults in Rules.XML. You can therefore test for
		specific conditions that you wish to handle - so for example, if you set a description
		with an <If> or <Set> command, it will override the description that AtomineerUtils
		would otherwise generate.
		
		Usually these customisation files reside next to Rules.xml, but if you wish to put them
		on a network share or source-controlled folder, you can save them anywhere you like and
		then add their location(s) to the Prefs.xml file's Misc\RulesPath entry. If multiple 
		locations are used, simply separate the pathnames with a semicolon.

		Layout of this file
		===================
		The rules are split into the following main sections, each of which contains extensive
		documentation indicating how to customise the rules for your own needs:

			<UserVariables>			When generating doc comment text, AtomineerUtils can replace
									variable names such as %user% with context-sensitive text.
									This section allows you to add your own variables, such as
									%CompanyName%.

			<DocXmlTemplates>		These sections control the comment output format used for
			<DoxygenTemplates>		each type of code element that can be documented. You can
									specify the order of the entries, add or remove blank lines,
									fill in plain-text defaults for entries, and add custom
									entries to your comments.

			<AutoDoc>				This section contains the rules that control the auto-
									generation of documentation comments. It contains a
									subsection for each code element type (classes, methods,
									parameters etc) within which are a number of rules that
									control what the is auto generated based on factors such
									as the name and type of the entry.
									
									Finally, it includes a <WordExpansion> section that maps
									abbreviations like "bmp" or "wnd" to their full form
									("bitmap" and "window")
	-->

	<UserVariables>
		<!--
		Set any desired user variables in this section.
		These can be output in description text or used in subsequent variable definitions using the
		%varName% syntax (see below).

		When documenting, each type being documented provides a set of useful variables.

		In addition the following global variables are always available:
			%user%					User's login name (or the overridden name provided in the Atomineer Options)

			%date%					The current date/time, in the format specified in the Atomineer Options
			%day%					The current day, e.g. "Tuesday"
			%dayofmonth%			The current day of the month as a number, e.g. "2"
			%month%					The current month, e.g. "June"
			%monthofyear%			The current month as a number, e.g. "6"
			%year%					The current year, e.g. "2009"

			%pathname%				Full pathname of the current file								e.g. "C:\MyProject\Source\MenuHandlers\FileOpen.cpp"
			%projectpathname%		Pathname of the current file relative to the project folder
									(or a full pathname if it's outside the project root),			e.g. "Source\MenuHandlers\FileOpen.cpp"
			%projectfolder%			Project folder containing the current file,						e.g. "Source\MenuHandlers"
			%folder%				Leafname of the folder containing the current file,				e.g. "MenuHandlers"
			%leafname%				Leafname of the current file (not including the file extension)	e.g. "FileOpen"
			%extension%				File extension of the current file (including the ".")			e.g. ".cpp"

			%project%				Name of the Project containing the current file
			%containingclass%		Name of the class containing the cursor (or the file leafname if intellisense unavailable)

			%assemblyname%			Assembly name for the Project containing the current file
			%assemblyversion%		Assembly version
			%assemblyfileversion%	Assembly file version
			%assemblytitle%			Assembly title
			%assemblydesc%			Assembly description
			%assemblycompany%		Assembly company name
			%assemblycopyright%		Assembly copyright
			%assemblytrademark%		Assembly trademark

		Note that if you create a variable with the same name as a global, the global will be replaced
		by your definition. The type-specific variables (e.g. %retType%) cannot be overridden.
		-->

		<Variable name="company"			ifSet="false" value="MyCompany.com"/>
		<Variable name="copyright"			ifSet="false" value="Copyright (c) %year% %company%. All rights reserved."/>
		<Variable name="useremail"			ifSet="false" value="%user%@%company%"/>

		<!--
		Special variables
		For language translations, or simply to adjust the output of AtomineerUtils, fill in the
		following variables (and check the rules that use them below):
		-->
		<Variable name="property-getonly"	ifSet="false" value="Gets"/>
		<Variable name="property-setonly"	ifSet="false" value="Sets"/>
		<Variable name="property-getset"	ifSet="false" value="Gets or sets"/>

		<Variable name="indexer-getonly"	ifSet="false" value="get"/>
		<Variable name="indexer-setonly"	ifSet="false" value="set"/>
		<Variable name="indexer-getset"		ifSet="false" value="get or set"/>
	
		<!--
		Options that control the output of the rules
		The options below are:
			stylecop			- set to true to change AtomineerUtils outputs to be StyleCop-compliant.

			docBasesWithSee		- set to true to document base classes/interfaces (where possible) as
								  <see cref="Fully.Qualified.BaseClass"/>
			docOverridesWithSee	- set to true to document overrides (where possible) as
								  <see cref="Fully.Qualified.OverrideName(Params)"/> instead of copying base-class
								  documentation or generating auto-doc text.
								  (Note that you also need to disable duplication of base documentation in the
								  preferences to allow these rules to be applied for overrides).
		-->
		<Variable name="stylecop"				ifSet="false" value="false"/>
		<Variable name="docBasesWithSee"		ifSet="false" value="false"/>
		<Variable name="docOverridesWithSee"	ifSet="false" value="false"/>
	</UserVariables>


	<!-- ======================================================================================= -->
	<!-- Templates for DocXml comment blocks. See the <DoxygenTemplates> for Doxygen equivalents -->
	<DocXmlTemplates>
		<!--
			Templates for DocXml Comment blocks
			===================================
			These control which entries are added to the comment, and their order, for each type
			of comment block that can be generated by AtomineerUtils.
			
			There are two sets of templates, for DocXml and Doxygen formats respectively.
			This block holds the DocXml templates.

			The types that can be independently templated are:
				file
				file-footer
				namespace
				enum, bitfield
				struct, class, interface
				method, property, indexer, delegate,
				constructor, destructor (c++), finaliser (c#),
				operator, eventhandler, eventsender

			If no template is supplied for a type, a default AtomineerUtils layout will be used.

			AtomineerUtils builds content for the most common entries for you. Use the following empty
			Xml elements as markers to indicate where these entries (if non-empty) should be placed in
			the comment:

				<summary/> <remarks/> <exception/> <param/> <returns/> <value/>.

			Remove or comment out any element to suppress it in the doc-comment.

			Note that <param/> is a placeholder for any parameters or generic/template type parameters, and
			can be used for classes and interfaces as well as methods.

			The special element <_/> adds a blank line between entries (note that using this tag
			*within* an entry simply adds "<_>" to the output comment. Instead, use newlines in an
			entry to add newlines to the output comment - but note that these may still be removed
			by the word wrap feature). Multiple blank lines will be merged.

			Any element containing attributes (other than the special ones listed below) or content
			will be simply copied into the doc comment, allowing you to add custom tags or override
			the output of the auto-generated text provided by AtomineerUtils.

			Variables
			=========
			Variables (see below) can be included with the %varName% syntax.

			Special attributes
			==================
			Special attributes can be added to control the output of each element individually:
				_wordwrap="true"	true  = (default) If the word wrapping preference is enabled
											word-wrap the text in this element.
									false = Ignore the preference and disable word-wrap in this
											element.
				_punctuate="true"	true  = (default) Add punctuation at the end of the element
											if it does not appear to end in punctuation.
									false = Do not add any additional punctuation.
				_verbatim="true"	true  = Copy the text from this element verbatim (no word
											wrap, no punctuation, no header on each line, etc)
									false = (default) Format the text from this element, using
											line headers and word wrap as configured.
				_optional="false"	true  =	This entry is "legal", and should be formatted to
											the given position in the final doc comment, but
											should not be added by AtomineerUtils if it is
											missing.
									false =	(default) This entry should be added by
									AtomineerUtils if it is not present.
				_blankEntry="text"	In the case of auto-generated entries such as param and
									exception, the standard is to have no entries if there are
									no params/exceptions to document. However, some companies
									require that an entry is retained, as in <param>None</param>
									If you specify a _blankEntry, this text will be used to
									create an entry in these circumstances.

			Hint: Adding "TODO" items to the Visual Studio Task List window
			===============================================================
			You can add TODO, HACK, UNDONE entries to be displayed automatically in the Visual
			Studio Task Window. However, there are some limitations:
			
			C#:
				Visual Studio doesn't recognise task comments that directly follow an XML start
				tag, so you must place the TODO on a blank line:
					<remarks>
						TODO: Don't forget to fill in the remarks!
					</remarks>

			C++:
				Visual Studio completely ignores task comments inside DocXml /// blocks.
				You must use the _verbatim="true" tag to emit a normal comment into the
				DocXml block:
					<remarks _verbatim="true">
						// TODO: Don't forget to fill in the remarks!
					</remarks>
			

			Examples
			========
				<summary>							Place the summary first, using AtomineerUtils-generated content 
				<remarks> No comment </remarks>		Place remarks next, containing the text "No comment"
				<_/>								Add a blank line
				<info author="%user%"/>				Add entry:	<info author="Jason Williams"/>
				<author> %user% </author>			Add entry:	<author> Jason Williams </author>

			Note:
			The file template is different from regular comment blocks because you aren't documenting
			a code element. AtomineerUtils offers two options:
			1) If this template includes any embedded XML elements, it will be treated as a regular
			   XML Documentation comment, and will thus take on the separators and other style
			   configured for your comments.
			2) If there are no embedded XML elements, this template is treated as a block of freeform
			   text - WYSIWYG.

			In both cases, you can insert any global variables or the following special variables:
				%fileDesc%	Description of this file as generated by the <File> autodoc rules below.
		-->

		<!-- StyleCop-compatible Xml-based file header.
			 Note that this uses &lt; and &gt; so that it will be treated as plain text rather than XML
		-->
		<file stylecop="true">
			// &lt;copyright file="%leafname%%extension%" company="%company%"&gt;
			// Copyright (c) %year% All Rights Reserved
			// &lt;/copyright&gt;
			// &lt;author&gt;%user%&lt;/author&gt;
			// &lt;date&gt;%date%&lt;/date&gt;
			// &lt;summary&gt;%fileDescription%&lt;/summary&gt;
		</file>

		<!-- Catch-all plain-text AtomineerUtils headers. See below for other examples -->
		<file>
			// file:	%projectpathname%
			//
			// summary:	%fileDescription%
		</file>

		<file-vb _separators="false">
			'---------------------------------------------------------------------------------------------------
			' file:		%projectpathname%
			'
			' summary:	%fileDescription%
			'---------------------------------------------------------------------------------------------------
		</file-vb>

		<!-- Special header and footer pair for .h and .hpp files, which will automatically add an
		     include-once mechanism to the file.

		<file _filetypes=".h.hpp" _addfooter="true" _separators="false">
			// file:	%projectpathname%
			//
			// summary:	%fileDescription%

			#ifndef INC_%leafname%_H
			#define INC_%leafname%_H

		</file>
		<filefooter filetypes=".h.hpp" _separators="false">
			// end of %projectpathname%
			#endif	// INC_%leafname%_H
		</filefooter>
		-->

		<!-- Free-form text file header example
		<file>
			// project:	%project%
			// file:	%projectpathname%
			//
			// summary:	%fileDescription%
			//
			//			%copyright%
			//
			//			Date		Developer		Change
			//			%date%	%user%	Created
		</file>
		-->

		<!-- XML comment example
		<file>
			<prototype>%projectpathname%</prototype>
			<_/>
			<summary/>
		</file>
		-->

		<!-- Catch-all plain-text file footers. These follow the same form as the file headers above -->
		<filefooter>
			// End of %projectpathname%
		</filefooter>

		<filefooter-vb _separators="false">
			'---------------------------------------------------------------------------------------------------
			' End of %projectpathname%
		</filefooter-vb>


		<!--
			Comment template for catch-all comments. These are added when the filetype of the document
			is not one of the core languages that AtomineerUtils can parse to auto-document. The
			separators and line headers used for each file extension (e.g. .html, .sql) are configured
			in your Prefs.xml, allowing AtomineerUtils to correctly insert simple "boilerplate" comments
			into any file format.
		-->
		<catchall>
			<summary/>
			<_/>
			<remarks>%user%, %date%</remarks>
		</catchall>

		<!--
			Default namespace comment. As with file comments, you can use plain-text or XML commenting for
			this entry.
		-->
		<namespace>
			// namespace: %name%
			//
			// summary:	%namespaceDescription%
		</namespace>

		<!-- Example XML namespace comment.
		<namespace>
			<prototype/>
			<_/>
			<summary/>
		</namespace>
		-->

		<typedef>
			<summary/>
			<_/>
			<remarks>%user%, %date%</remarks>
			<_/>
			<seealso _punctuate="false" _optional="true"/>
		</typedef>

		<enum>
			<summary/>
			<_/>
			<remarks>%user%, %date%</remarks>
			<_/>
			<seealso _punctuate="false" _optional="true"/>
		</enum>

		<bitfield>
			<summary/>
			<_/>
			<remarks>%user%, %date%</remarks>
			<_/>
			<seealso _punctuate="false" _optional="true"/>
		</bitfield>

		<struct>
			<summary/>
			<_/>
			<remarks>%user%, %date%</remarks>
			<_/>
			<example _punctuate="false" _optional="true"/>
			<_/>
			<seealso _punctuate="false" _optional="true"/>
		</struct>

		<union>
			<summary/>
			<_/>
			<remarks>%user%, %date%</remarks>
			<_/>
			<example _punctuate="false" _optional="true"/>
			<_/>
			<seealso _punctuate="false" _optional="true"/>
		</union>

		<class>
			<summary/>
			<_/>
			<remarks>%user%, %date%</remarks>
			<_/>
			<param/>
			<_/>
			<example _punctuate="false" _optional="true"/>
			<_/>
			<seealso _punctuate="false" _optional="true"/>
		</class>

		<interface>
			<summary/>
			<_/>
			<remarks>%user%, %date%</remarks>
			<_/>
			<param/>
			<_/>
			<example _punctuate="false" _optional="true"/>
			<_/>
			<seealso _punctuate="false" _optional="true"/>
		</interface>

		<def>				<!-- C/C++ #define macro -->
			<summary/>
			<_/>
			<remarks>%user%, %date%</remarks>
			<_/>
			<param/>
			<_/>
			<example _punctuate="false" _optional="true"/>
			<_/>
			<seealso _punctuate="false" _optional="true"/>
		</def>

		<method>
			<summary/>
			<_/>
			<remarks>%user%, %date%</remarks>
			<_/>
			<exception/>
			<_/>
			<param/>
			<_/>
			<returns/>
			<_/>
			<example _punctuate="false" _optional="true"/>
			<_/>
			<seealso _punctuate="false" _optional="true"/>
		</method>

		<property>
			<summary/>
			<_/>
			<remarks _optional="true"/>
			<_/>
			<value/>
			<_/>
			<seealso _punctuate="false" _optional="true"/>
		</property>

		<indexer>
			<summary/>
			<_/>
			<remarks _optional="true"/>
			<_/>
			<param/>
			<_/>
			<value/>
			<_/>
			<seealso _punctuate="false" _optional="true"/>
		</indexer>

		<delegate>
			<summary/>
			<_/>
			<remarks>%user%, %date%</remarks>
			<_/>
			<exception/>
			<_/>
			<param/>
			<_/>
			<returns/>
			<_/>
			<seealso _punctuate="false" _optional="true"/>
		</delegate>

		<constructor>
			<summary/>
			<_/>
			<remarks>%user%, %date%</remarks>
			<_/>
			<exception/>
			<_/>
			<param/>
		</constructor>

		<destructor>
			<summary/>
			<_/>
			<remarks>%user%, %date%</remarks>
			<_/>
			<exception/>
			<_/>
			<param/>
		</destructor>

		<finaliser>
			<summary/>
			<_/>
			<remarks>%user%, %date%</remarks>
			<_/>
			<exception/>
			<_/>
			<param/>
		</finaliser>

		<operator>
			<summary/>
			<_/>
			<remarks>%user%, %date%</remarks>
			<_/>
			<exception/>
			<_/>
			<param/>
			<_/>
			<returns/>
		</operator>

		<eventhandler>
			<summary/>
			<_/>
			<remarks>%user%, %date%</remarks>
			<_/>
			<exception/>
			<_/>
			<param/>
			<_/>
			<returns/>
			<_/>
			<seealso _punctuate="false" _optional="true"/>
		</eventhandler>

		<eventsender>
			<summary/>
			<_/>
			<remarks>%user%, %date%</remarks>
			<_/>
			<exception/>
			<_/>
			<param/>
			<_/>
			<returns/>
			<_/>
			<seealso _punctuate="false" _optional="true"/>
		</eventsender>

		<!-- Template for member variables -->
		<member>
			<summary/>
		</member>

		<!-- Templates for methods in abstract classes and interfaces -->
		<interfacemethod>
			<summary/>
			<_/>
			<remarks _optional="true"/>
			<_/>
			<param/>
			<_/>
			<returns/>
			<_/>
			<example _punctuate="false" _optional="true"/>
			<_/>
			<seealso _punctuate="false" _optional="true"/>
		</interfacemethod>

		<interfaceproperty>
			<summary/>
			<_/>
			<remarks _optional="true"/>
			<_/>
			<value/>
			<_/>
			<example _punctuate="false" _optional="true"/>
			<_/>
			<seealso _punctuate="false" _optional="true"/>
		</interfaceproperty>

		<interfaceindexer>
			<summary/>
			<_/>
			<remarks _optional="true"/>
			<_/>
			<param/>
			<_/>
			<value/>
			<_/>
			<example _punctuate="false" _optional="true"/>
			<_/>
			<seealso _punctuate="false" _optional="true"/>
		</interfaceindexer>

	</DocXmlTemplates>


	<!-- ====================================================================================== -->
	<!-- Templates for Doxygen comment blocks. See the <DocXmlTemplates> for DocXml equivalents -->
	<DoxygenTemplates>
		<!--
			Templates for Doxygen Comment blocks
			====================================
			These control which entries are added to the comment, and their order, for each type
			of comment block that can be generated by AtomineerUtils.
			
			There are two sets of templates, for DocXml and Doxygen formats respectively.
			This block holds the Doxygen templates.

			The types that can be independently templated are:
				file
				file-footer
				namespace
				enum, bitfield
				struct, class, interface
				method, property, indexer, delegate, constructor, destructor (c++), finaliser (c#), operator, eventhandler, eventsender

			If no template is supplied for a type, a default AtomineerUtils layout will be used.

			AtomineerUtils builds content for the most common entries for you. Use the following empty
			Xml elements as markers to indicate where these entries (if non-empty) should be placed in
			the comment:

				<prototype/> <summary/> <date/> <user/> <exception/> <param/> <returns/> <value/>.

			Note that for compatibility with DocXml templates, the following names are used when
			actually referring to Doxygen commands/entries:
				<prototype/>	the prototype command for the code element (\fn, \enum, \class, \struct, etc)
				<summary/>		the \brief entry

			Remove or comment out any element to suppress it in the doc-comment.

			Note that <param/> is a placeholder for any parameters or generic/template type parameters, and
			can be used for classes and interfaces as well as methods.

			The special element <_/> adds a blank line between entries (note that using this tag
			*within* an entry simply adds "<_>" to the output comment. Instead, use newlines in an
			entry to add newlines to the output comment - but note that these may still be removed
			by the word wrap feature). Multiple blank lines will be merged.

			Any element containing attributes (other than the special ones listed below) or content
			will be simply copied into the doc comment, allowing you to add custom tags or override
			the output of the auto-generated text provided by AtomineerUtils.

			Variables
			=========
			Variables (see below) can be included with the %varName% syntax.

			Special attributes
			==================
			Special attributes can be added to control the output of each element individually:
				_wordwrap="true"	true  = (default) If the word wrapping preference is enabled
											word-wrap the text in this element.
									false = Ignore the preference and disable word-wrap in this
											element.
				_punctuate="true"	true  = (default) Add punctuation at the end of the element
											if it does not appear to end in punctuation.
									false = Do not add any additional punctuation.
				_verbatim="true"	true  = Copy the text from this element verbatim (no word
											wrap, no punctuation, no header on each line, etc)
									false = (default) Format the text from this element, using
											line headers and word wrap as configured.
				_optional="false"	true  =	This entry is "legal", and should be formatted to
											the given position in the final doc comment, but
											should not be added by AtomineerUtils if it is
											missing.
									false =	(default) This entry should be added by
									AtomineerUtils if it is not present.
				_blankEntry="text"	In the case of auto-generated entries such as param, returns
									and exception, the standard is to have no entries if there are
									no params/exceptions to document. However, some companies
									require that an entry is retained, as in <param>None</param>
									If you specify a _blankEntry, this text will be used to
									create an entry in these circumstances.

			Hint: Adding "TODO" items to the Visual Studio Task List window
			===============================================================
			You can add TODO, HACK, UNDONE entries to be displayed automatically in the Visual
			Studio Task Window. However, there are some limitations:
			
			C#:
				Visual Studio doesn't recognise task comments that directly follow an XML start
				tag, so you must place the TODO on a blank line:
					<remarks>
						TODO: Don't forget to fill in the remarks!
					</remarks>

			C++:
				Visual Studio completely ignores task comments inside DocXml /// blocks.
				You must use the _verbatim="true" tag to emit a normal comment into the
				DocXml block:
					<remarks _verbatim="true">
						// TODO: Don't forget to fill in the remarks!
					</remarks>
			

			Examples
			========
				<summary>							Place the summary first, using AtomineerUtils-generated content 
				<remarks> No comment </remarks>		Place remarks next, containing the text "No comment"
				<_/>								Add a blank line
				<info author="%user%"/>				Add entry:	<info author="Jason Williams"/>
				<author> %user% </author>			Add entry:	<author> Jason Williams </author>

			Note:
			The file template is different from regular comment blocks because you aren't documenting
			a code element. AtomineerUtils offers two options:
			1) If this template includes any embedded XML elements, it will be treated as a regular
			   XML Documentation comment, and will thus take on the separators and other style
			   configured for your comments.
			2) If there are no embedded XML elements, this template is treated as a block of freeform
			   text - WYSIWYG.

			In both cases, you can insert any global variables or the following special variables:
				%fileDesc%	Description of this file as generated by the <File> autodoc rules below.
		-->

		<!-- Special header and footer pair for .h and .hpp files, which will automatically add an
		     include-once mechanism to the file.

		<file _filetypes=".h.hpp" _addfooter="true" _separators="false">
			// file:	%projectpathname%
			//
			// summary:	%fileDescription%

			#ifndef INC_%leafname%_H
			#define INC_%leafname%_H

		</file>
		<filefooter filetypes=".h.hpp" _separators="false">
			// end of %projectpathname%
			#endif	// INC_%leafname%_H
		</filefooter>
		-->

		<file>
			<prototype _punctuate="false">%projectpathname%</prototype>
			<_/>
			<summary/>
		</file>

		<file-vb _separators="false">
			<prototype _punctuate="false">%projectpathname%</prototype>
			<_/>
			<summary/>
		</file-vb>

		<!-- Free-form text example
		<file>
			// project:	%project%
			// file:	%projectpathname%
			//
			// summary:	%fileDescription%
			//
			//			%copyright%
			//
			//			Date		Developer		Change
			//			%date%	%user%	Created
		</file>
		-->

		<!-- Default plain-text AtomineerUtils file footer. These follow the same form as the file headers above -->
		<filefooter>
			// End of %projectpathname%
		</filefooter>

		<filefooter-vb _separators="false">
			'---------------------------------------------------------------------------------------------------
			' End of %projectpathname%
		</filefooter-vb>

		<!--
			Comment template for catch-all comments. These are added when the filetype of the document
			is not one of the core languages that AtomineerUtils can parse to auto-document. The
			separators and line headers used for each file extension (e.g. .html, .sql) are configured
			in your Prefs.xml, allowing AtomineerUtils to correctly insert simple "boilerplate" comments
			into any file format.
		-->
		<catchall>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</catchall>

		<!--
			Default namespace comment. As with file comments, you can use plain-text or XML commenting for
			this entry.
		-->
		<namespace>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</namespace>

		<typedef>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</typedef>

		<enum>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</enum>

		<bitfield>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</bitfield>

		<struct>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</struct>

		<union>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</union>

		<class>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_/>
			<param/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</class>

		<interface>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_/>
			<param/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</interface>

		<def>			<!-- C/C++ #define macro -->
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_/>
			<param/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</def>

		<method>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_/>
			<exception/>
			<_/>
			<param/>
			<_/>
			<returns/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</method>

		<property>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<value/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</property>

		<indexer>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<param/>
			<_/>
			<value/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</indexer>

		<delegate>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_/>
			<exception/>
			<_/>
			<param/>
			<_/>
			<returns/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</delegate>

		<constructor>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_/>
			<exception/>
			<_/>
			<param/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</constructor>

		<destructor>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_/>
			<exception/>
			<_/>
			<param/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</destructor>

		<finaliser>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_/>
			<exception/>
			<_/>
			<param/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</finaliser>

		<operator>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_/>
			<exception/>
			<_/>
			<param/>
			<_/>
			<returns/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</operator>

		<eventhandler>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_/>
			<exception/>
			<_/>
			<param/>
			<_/>
			<returns/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</eventhandler>

		<eventsender>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_/>
			<exception/>
			<_/>
			<param/>
			<_/>
			<returns/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</eventsender>

		<member>
			<summary/>
		</member>

		<!-- Templates for methods in abstract classes and interfaces -->
		<interfacemethod>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<param/>
			<_/>
			<returns/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</interfacemethod>

		<interfaceproperty>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<value/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</interfaceproperty>

		<interfaceindexer>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<param/>
			<_/>
			<value/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</interfaceindexer>
	</DoxygenTemplates>


	<!-- ====================================================================================== -->
	<!-- Templates for Doxygen comment blocks. See the <DocXmlTemplates> for DocXml equivalents -->
	<NaturalTemplates>
		<!--
			Templates for Doxygen Comment blocks
			====================================
			These control which entries are added to the comment, and their order, for each type
			of comment block that can be generated by AtomineerUtils.
			
			There are two sets of templates, for DocXml and Doxygen formats respectively.
			This block holds the Doxygen templates.

			The types that can be independently templated are:
				file
				file-footer
				namespace
				enum, bitfield
				struct, class, interface
				method, property, indexer, delegate, constructor, destructor (c++), finaliser (c#), operator, eventhandler, eventsender

			If no template is supplied for a type, a default AtomineerUtils layout will be used.

			AtomineerUtils builds content for the most common entries for you. Use the following empty
			Xml elements as markers to indicate where these entries (if non-empty) should be placed in
			the comment:

				<prototype/> <summary/> <date/> <user/> <exception/> <param/> <returns/> <value/>.

			Note that for compatibility with DocXml templates, the following names are used when
			actually referring to Doxygen commands/entries:
				<prototype/>	the prototype command for the code element (\fn, \enum, \class, \struct, etc)
				<summary/>		the \brief entry

			Remove or comment out any element to suppress it in the doc-comment.

			Note that <param/> is a placeholder for any parameters or generic/template type parameters, and
			can be used for classes and interfaces as well as methods.

			The special element <_/> adds a blank line between entries (note that using this tag
			*within* an entry simply adds "<_>" to the output comment. Instead, use newlines in an
			entry to add newlines to the output comment - but note that these may still be removed
			by the word wrap feature). Multiple blank lines will be merged.

			Any element containing attributes (other than the special ones listed below) or content
			will be simply copied into the doc comment, allowing you to add custom tags or override
			the output of the auto-generated text provided by AtomineerUtils.

			Variables
			=========
			Variables (see below) can be included with the %varName% syntax.

			Special attributes
			==================
			Special attributes can be added to control the output of each element individually:
				_wordwrap="true"	true  = (default) If the word wrapping preference is enabled
											word-wrap the text in this element.
									false = Ignore the preference and disable word-wrap in this
											element.
				_punctuate="true"	true  = (default) Add punctuation at the end of the element
											if it does not appear to end in punctuation.
									false = Do not add any additional punctuation.
				_verbatim="true"	true  = Copy the text from this element verbatim (no word
											wrap, no punctuation, no header on each line, etc)
									false = (default) Format the text from this element, using
											line headers and word wrap as configured.
				_optional="false"	true  =	This entry is "legal", and should be formatted to
											the given position in the final doc comment, but
											should not be added by AtomineerUtils if it is
											missing.
									false =	(default) This entry should be added by
									AtomineerUtils if it is not present.
				_blankEntry="text"	In the case of auto-generated entries such as param, returns
									and exception, the standard is to have no entries if there are
									no params/exceptions to document. However, some companies
									require that an entry is retained, as in <param>None</param>
									If you specify a _blankEntry, this text will be used to
									create an entry in these circumstances.

			Hint: Adding "TODO" items to the Visual Studio Task List window
			===============================================================
			You can add TODO, HACK, UNDONE entries to be displayed automatically in the Visual
			Studio Task Window. However, there are some limitations:
			
			C#:
				Visual Studio doesn't recognise task comments that directly follow an XML start
				tag, so you must place the TODO on a blank line:
					<remarks>
						TODO: Don't forget to fill in the remarks!
					</remarks>

			C++:
				Visual Studio completely ignores task comments inside DocXml /// blocks.
				You must use the _verbatim="true" tag to emit a normal comment into the
				DocXml block:
					<remarks _verbatim="true">
						// TODO: Don't forget to fill in the remarks!
					</remarks>
			

			Examples
			========
				<summary>							Place the summary first, using AtomineerUtils-generated content 
				<remarks> No comment </remarks>		Place remarks next, containing the text "No comment"
				<_/>								Add a blank line
				<info author="%user%"/>				Add entry:	<info author="Jason Williams"/>
				<author> %user% </author>			Add entry:	<author> Jason Williams </author>

			Note:
			The file template is different from regular comment blocks because you aren't documenting
			a code element. AtomineerUtils offers two options:
			1) If this template includes any embedded XML elements, it will be treated as a regular
			   XML Documentation comment, and will thus take on the separators and other style
			   configured for your comments.
			2) If there are no embedded XML elements, this template is treated as a block of freeform
			   text - WYSIWYG.

			In both cases, you can insert any global variables or the following special variables:
				%fileDesc%	Description of this file as generated by the <File> autodoc rules below.
		-->

		<!-- Special header and footer pair for .h and .hpp files, which will automatically add an
		     include-once mechanism to the file.

		<file _filetypes=".h.hpp" _addfooter="true" _separators="false">
			// file:	%projectpathname%
			//
			// summary:	%fileDescription%

			#ifndef INC_%leafname%_H
			#define INC_%leafname%_H

		</file>
		<filefooter filetypes=".h.hpp" _separators="false">
			// end of %projectpathname%
			#endif	// INC_%leafname%_H
		</filefooter>
		-->

		<file>
			<prototype _punctuate="false">%projectpathname%</prototype>
			<_/>
			<summary/>
		</file>

		<file-vb _separators="false">
			<prototype _punctuate="false">%projectpathname%</prototype>
			<_/>
			<summary/>
		</file-vb>

		<!-- Free-form text example
		<file>
			// project:	%project%
			// file:	%projectpathname%
			//
			// summary:	%fileDescription%
			//
			//			%copyright%
			//
			//			Date		Developer		Change
			//			%date%	%user%	Created
		</file>
		-->

		<!-- Default plain-text AtomineerUtils file footer. These follow the same form as the file headers above -->
		<filefooter>
			// End of %projectpathname%
		</filefooter>

		<filefooter-vb _separators="false">
			'---------------------------------------------------------------------------------------------------
			' End of %projectpathname%
		</filefooter-vb>

		<!--
			Comment template for catch-all comments. These are added when the filetype of the document
			is not one of the core languages that AtomineerUtils can parse to auto-document. The
			separators and line headers used for each file extension (e.g. .html, .sql) are configured
			in your Prefs.xml, allowing AtomineerUtils to correctly insert simple "boilerplate" comments
			into any file format.
		-->
		<catchall>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<_/>
			<date _punctuate="false">%date%</date>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</catchall>

		<!--
			Default namespace comment. As with file comments, you can use plain-text or XML commenting for
			this entry.
		-->
		<namespace>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</namespace>

		<typedef>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</typedef>

		<enum>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</enum>

		<bitfield>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</bitfield>

		<struct>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<_/>
			<date _punctuate="false">%date%</date>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</struct>

		<union>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<_/>
			<date _punctuate="false">%date%</date>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</union>

		<class>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<_/>
			<date _punctuate="false">%date%</date>
			<_/>
			<param/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</class>

		<interface>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<_/>
			<date _punctuate="false">%date%</date>
			<_/>
			<param/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</interface>

		<def>			<!-- C/C++ #define macro -->
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<_/>
			<date _punctuate="false">%date%</date>
			<_/>
			<param/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</def>

		<method>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<_/>
			<date _punctuate="false">%date%</date>
			<_/>
			<exception/>
			<_/>
			<param/>
			<_/>
			<returns/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</method>

		<property>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<value/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</property>

		<indexer>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<param/>
			<_/>
			<value/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</indexer>

		<delegate>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<_/>
			<date _punctuate="false">%date%</date>
			<_/>
			<exception/>
			<_/>
			<param/>
			<_/>
			<returns/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</delegate>

		<constructor>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<_/>
			<date _punctuate="false">%date%</date>
			<_/>
			<exception/>
			<_/>
			<param/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</constructor>

		<destructor>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<_/>
			<date _punctuate="false">%date%</date>
			<_/>
			<exception/>
			<_/>
			<param/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</destructor>

		<finaliser>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<_/>
			<date _punctuate="false">%date%</date>
			<_/>
			<exception/>
			<_/>
			<param/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</finaliser>

		<operator>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<_/>
			<date _punctuate="false">%date%</date>
			<_/>
			<exception/>
			<_/>
			<param/>
			<_/>
			<returns/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</operator>

		<eventhandler>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<_/>
			<date _punctuate="false">%date%</date>
			<_/>
			<exception/>
			<_/>
			<param/>
			<_/>
			<returns/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</eventhandler>

		<eventsender>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<author _punctuate="false">%user%</author>
			<_/>
			<date _punctuate="false">%date%</date>
			<_/>
			<exception/>
			<_/>
			<param/>
			<_/>
			<returns/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</eventsender>

		<member>
			<summary/>
		</member>

		<!-- Templates for methods in abstract classes and interfaces -->
		<interfacemethod>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<param/>
			<_/>
			<returns/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</interfacemethod>

		<interfaceproperty>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<value/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</interfaceproperty>

		<interfaceindexer>
			<prototype _punctuate="false"/>
			<_/>
			<summary/>
			<_/>
			<param/>
			<_/>
			<value/>
			<_/>
			<sa _punctuate="false" _optional="true"/>
		</interfaceindexer>
	</NaturalTemplates>


	<!-- ====================================================================================== -->
	<AutoDoc>
		<!--
		AutoDoc rules
		=============
		For each code element, the %name% variable is set to the name of the element (e.g. "UserInfo"
		or "user_info").  The %sName% variable contains this name, converted to a sentence-like format.
		To do this, AtomineerUtils breakes the name into words ("user info") and then uses the
		<WordExpansion> section (below) to expand abbreviations ("user information"). Most of the rules
		below therefore use the %sName% variable, as this provides a cleaner and more consistent input
		for matching.
		
		The rules are made up of XML elements, each of which is a simple command that tries to apply
		text-based matching to variable values (such as a parameter name or type, number of parameters
		for a method, etc). If a match succeeds, an attribute indeicates the descripiotn text to output.
		
		The available commands are:


		<If> command
		Conditionally adds to the output text and/or executes child commands.

		Most attributes in this command are treated as condition tests. The attribute name
		specifies a value relating to the item being documented (e.g its name or type), and the
		attribute value contains one or more tests to apply to it. The tests are separated by commas,
		and can be in the following "simplified wildcard" formats:
			name="#Suffix"			Tests if the item's "name" ends with the given suffix text
			name="Prefix#"			Tests if the item's "name" begins with the given prefix text
			name="Prefix#Suffix"	Tests if the item's "name" is bracketed by the given prefix and suffix text
			name="#Body#"			Tests if the item's "name" contains the given body text within it
			name="Literal"			Tests if the item's "name" exactly matches the given text

		The # wildcards are explicitly matched, so only the above forms are recognised. Where one # is in
		the condition, the text matching the # will be placed into the variable %match:Sentence:LCase%.
		In the case where two # characters are used, the variables %match1% and %match2%.
		Note that # will only match one or more characters.

		You may test if any one of several conditions is met by separating them with commas, as in:
			name="Is#,Are#"
			retType="bool,BOOL"
			name="#EventArgs"
		This is treated as an "OR" operator, i.e. only one of the conditions needs to be true for the If
		to evaluate to true.

		Note that if you specify several different conditions (name="GetIndex" retType="int") then the
		command only evaluates to true if all the conditions are true (i.e. it treats the statement as
		If (name="GetIndex" AND retType="int"). To execute commands if one condition OR the other is
		true, you must use several if statements.

		When the if condition is matched, it can optionally add text to the output description - just
		add the attribute desc="???". The ??? text can contain literal text as well as variables that
		expand to text in a context-sensitive manner. These are written in the form %varName%.
		(See below for details on using variables)

		<If> elements can be nested, and will be executed in order, each (optionally) appending more
		text to the output description, allowing a standard description to be built up from fragments
		(e.g. document a function with extra information if it includes an extra parameter). The
		outer <If> need not have any desc supplied, so you can do several tests before you
		actually add any text to the description.

		Processing will normally stop as soon as a match is found (that is, an If command evaluates
		to true, and it returns non-blank desc="" text). In some cases you may wish several If
		commands to be executed in succession to build up a description in parts. In this case, add
		a continue="yes" attribute to cause processing to continue after the If is matched.
		(When an If command has child elements, the continue occurs automatically into the children)

		Note that If statements are executed in the order they are written, so you must ensure that
		more specific tests are applied before less specific ones (e.g. match "#EventArgs" before "#Args")

		Example
		The following rules will be activated if a method starts with one of the words Is/Are/Should/Can,
		and has a return type of bool or BOOL. If this is matched, a description is added, prepended
		with [in,out] for ref/reference/pointer variables, and [out] for "out" parameters.

		<If name="Is#,Are#,Should#,Can#" type="bool#">
			<If type="#ref#,#*#,#&#"	desc="[in,out] " />
			<If type="#out#"			desc="[out] " />
			<If desc="true if %match:Sentence:LCase%, false if not" />
		</If>


		<IfNot> command
		This is identical in operation to the <If> command, except that the contents of the command
		are executed only if the condition evaluates to false (rather than true).


		<Set> command
		This is identical to the <If> command, but is used with the desc="" attribute only.
		This allows you to unconditionally set a description (usually as the last case in a nested If).
		e.g
			<If name="Equals">
				<If numArgs="1"	desc="Specific description for numArgs=1 case"/>
				<Set			desc="Catch-all description for all other cases"/>
			</If>


		Autodoc variables
		=================
		Variables may be inserted in the desc="" text to insert special text into the output. Each
		variable is delimited by % characters (use %% to insert a literal % symbol). Any variable
		(except %ip%) can be used as many times as you like within a description.
						
		The following commands are defined:

		%ip%			Insertion Point. The place where the cursor will be left after the comment
						is inserted. Use only one %ip% in any doc comment.
		%match%			For wildcard matches, the %match% command inserts the text that matched
						the wildcard. (In cases involving two wildcards, the variables %match1%
						and %match2% are used).
		%???%			Depending on the context, more variables will exist. In most cases "name"
						will return the full name of the code element being documented, and "sname"
						will return it in sentence form (with spaces between words, and abbreviated
						words expanded to their full name), but some contexts will provide much more
						information - For example, Methods provide %name%, %sname%, %retType%,
						%numArgs%, %argName1%, %argType1% ...

		Variables that insert text can have additional processing commands applied to that text.
		Each command is of the form ":command", and you can append as many commands as you like.
		e.g. "%match:Sentence:StripLastWord:SCase:Plural" would have the effect of converting the
		name "DivideByZeroException" into the text "Divide by zeroes".

		The available commands are:
		(no suffix)			Use the text verbatim
								- DivideByZeroException
		:Sentence			Insert spaces between words, retaining existing capitalisation
								- Divide By Zero Exception
							Conversion to sentence form also expands any abbreviated words,
								e.g. InfoMgr -> Information Manager
		:FirstWord			The first word of the text
								- Divide
		:LastWord			The last word of the text
								- Exception
		:StripFirstWord		Everything except the first word
								- ByZeroException
		:StripLastWord		Everything except the last word
								- DivideByZero
		:LCase				lowercase the text
								- dividebyzeroexception
		:UCase				uppercase the text
								- DIVIDEBYZEROEXCEPTION
		:SCase				sentence-case the text (uppercase the first character, lowercase the rest)
								- Dividebyzeroexception
		:Plural				attempts to pluralise a word. This will give results like:
								"square -> squares, box -> boxes, party -> parties, goose -> gooses"
								- DivideByZeroExceptions

		Most of these commands are of little use on their own, but once combined with Sentence,
		can produce much more useful or readable text output.
		
		Special handling for better quality output
		==========================================
		The following special handling is provided to improve the quality of autodoc output. These
		methods use heuristics to detect and correct the English, which do not always succeed, but do
		improve the output text in the majority of cases:
			+ :Plural command can be used to attempt to pluralise a word as it is expanded.
					e.g. "Box" -> "Boxes"

			+ Any text that has the word "a" in it is processed to replace the "a" with "an" or "the"
					e.g. "Report a warning"		-> "Report a warning"
						 "Report a error"		-> "Report an error"
						 "Report a warnings"	-> "Report the warnings"
						 "Report a errors"		-> "Report the errors"
		-->

		<CatchAll>
			<!-- Rules for generating auto-documentation for 'catch all' comments. The results of
				 executing this rule are used when adding comments to file-types that AtomineerUtils
				 does not have any dedicated parsing support for.
			 -->
			<Set											desc=""/>
		</CatchAll>

		<File>
			<!-- Rules for generating auto-documentation for file header comments. The results of
				 executing this rule are placed in %fileDescription% when adding file comments.
			 -->
			<If extension=".c"								desc=""/>

			<If sNameRaw="I #"								desc="Declares the %name% interface"/>

			<If extension=".h,.hpp"							continue="y" desc="Declares the "/>
			<If extension=".cs,.cpp,.java"					continue="y" desc="Implements the "/>

			<If sName="# dialog,# dialogue"					desc="%match:noPrefix:LCase% Dialog"/>
			<If sName="# form,# window"						desc="%match:noPrefix:LCase% Windows Form"/>

			<Set											desc="%sname:noPrefix:LCase% class"/>
		</File>

		<Namespace>
			<!-- Rules for generating auto-documentation for namespace comments. The results of
				 executing this rule are placed in %namespaceDescription% when adding file comments.
			 -->
		</Namespace>

		<Exceptions prefix="Thrown when " suffix=".">
			<!-- Rules for auto-documentation of exception types -->
			<If name="ArgumentNullException,EArgumentNull"				desc="one or more required arguments are null"/>
			<If name="ArgumentOutOfRangeException,EArgumentOutOfRange"	desc="one or more arguments are outside the required range"/>
			<If name="ArgumentException,EArgument"						desc="one or more arguments have unsupported or illegal values"/>
			<If name="ArithmeticException,EArithmetic"					desc="an error occurs in an arithmetic, casting or conversion operation"/>
			<If name="DivideByZeroException,EDivideByZero"				desc="an attempt is made to divide a number by zero"/>
			<If name="OverflowException,EOverflow"						desc="an arithmetic overflow occurs"/>
			<If name="ArrayTypeMismatchException,EArrayTypeMismatch"	desc="an attempt is made to store an object of the wrong type in the array"/>
			<If name="FormatException,EFormat"							desc="the format of the ? is incorrect"/>
			<If name="IndexOutOfRangeException,EIndexOutOfRange"		desc="the index is outside the required range"/>
			<If name="InvalidCastException,EInvalidCast"				desc="an object cannot be cast to a required type"/>
			<If name="InvalidOperationException,EInvalidOperation"		desc="the requested operation is invalid"/>
			<If name="ObjectDisposedException,EObjectDisposed"			desc="a supplied object has been disposed"/>
			<If name="IOException"										desc="an IO failure occurred"/>
			<If name="DirectoryNotFoundException,EDirectoryNotFound"	desc="the requested directory is not present"/>
			<If name="NotFoundException,ENotFound" 						desc="the requested element is not present"/>
			<If name="EndOfStreamException,EEndOfStream"				desc="the end of the stream was unexpectedly reached"/>
			<If name="FileNotFoundException,EFileNotFound"				desc="the requested file is not present"/>
			<If name="PathTooLongException,EPathTooLong"				desc="the file/folder path is too long"/>
			<If name="NotImplementedException,ENotImplemented"			desc="the requested operation is unimplemented"/>
			<If name="NotSupportedException,ENotSupported"				desc="the requested operation is not supported"/>
			<If name="NotInitializedException,ENotInitialized"			desc="a value was unexpectedly uninitialized"/>
			<If name="NullReferenceException,ENullReference"			desc="a value was unexpectedly null"/>
			<If name="OutOfMemoryException,EOutOfMemory"				desc="a low memory situation occurs"/>
			<If name="SecurityException,ESecurity"						desc="a security violation occurs"/>
			<If name="VerificationException,EVerification"				desc="a security verification failure occurs"/>
			<If name="StackOverflowException,EStackOverflow"			desc="a stack overflow occurs"/>
			<If name="SqlException,ESql"								desc="an error is generated by the SQL server"/>
			<If name="BadImageFormatException,EBadImageFormat"			desc="the file image of a dll or exe is invalid"/>
			<If name="COMException"										desc="an unrecognised HRESULT is returned from a COM method call"/>
			<If name="AccessViolationException,EAccessViolation"		desc="an attempt was made to read or write unallocated or protected memory"/>
			<If name="OperationFailedException,EOperationFailed"		desc="operation failed to execute"/>
			<If name="OutOfRangeException,EOutOfRange"					desc="one or more elements are outside the required range"/>

			<!-- Throwing basic data types (C++) -->
			<If name="int,long,float,double,char"						desc="an error condition occurs"/>

			<!-- Catch-alls. Just converts the element name into a sentence format, stripping an 'Exception' prefix/suffix -->
			<If name="#Exception"										desc="a %match:Sentence% error condition occurs"/>
			<If name="Exception#"										desc="a %match:Sentence% error condition occurs"/>
			<Set														desc="a %sname% error condition occurs"/>
		</Exceptions>

		<Typedefs prefix="Defines an alias representing ">
			<!-- Rules used for typedefs
				 Additional values that can be used for filtering/documenting include:
					name			The name of the parameter
					sName			The name of the parameter, converted to sentence (space separated words) format, with abbreviated words expanded
					type			The type of the parameter (const int*)
					typeBase		The type of the parameter, not including any modifiers (int)
					index			The 1-based index of the parameter within the method's parameter list
					word1			The first word of the parameter (often used for prefixes, e.g. m_, lpsz, etc)
					coreName		The name with the first word removed (to allow processing of prefixed names)
					isPointer		"y" or "n", indicating if the parameter type includes a "*" or "^"
					isReference		"y" or "n", indicating if the parameter type includes an "&" or "ref"
			 -->

			<Execute rules="Variables"/>					<!-- Execute the Variable documenting rules -->
		</Typedefs>

		<Variables>
			<!-- Rules used for variables
				 Additional values that can be used for filtering/documenting include:
					name			The name of the parameter
					namenp			The name of the parameter, with known prefixes removed
					sName			The name of the parameter, converted to sentence (space separated words) format, with abbreviated words expanded
					type			The type of the parameter (const int*)
					typeBase		The type of the parameter, not including any modifiers (int)
					index			The 1-based index of the parameter within the method's parameter list
					word1			The first word of the parameter (often used for prefixes, e.g. m_, lpsz, etc)
					coreName		The name with the first word removed (to allow processing of prefixed names)
					isPointer		"y" or "n", indicating if the parameter type includes a "*" or "^"
					isReference		"y" or "n", indicating if the parameter type includes an "&" or "ref"
					isEvent			"y" or "n", indicating if the variable is an event declaration
			 -->

			<!-- Events are commented as "variables" but can in fact be overrides of base class
				 events or implementaitons of interface events. If this is an overide and the special
				 'docOverridesWithSee' flag is set, we don't use the standard documentation generation
				 approach, but instead substitute a <see> reference. Note that you also need to disable
				 duplication of base documentation in the preferences to allow this rule to be applied
				 for overrides.
			-->
			<If specialType="override" docOverridesWithSee="true">
				<IfNot baseClass="unknown">
					<Set									desc='See &lt;see cref="%baseClass%.%name%"/&gt;'/>
				</IfNot>
			</If>

			<!-- Trap names like "oldName" to avoid them being documented as "name of the old" -->
			<If sName="old *,new *"							desc="The %SName:LCase%"/>

			<If isEvent="y">
				<If sName="# Event"							desc="Event queue for all listeners interested in %namenp:StripLastWord% events."/>
				<Set										desc="Event queue for all listeners interested in %namenp% events."/>
			</If>

			<If type="bool,boolean">
				<If sName="is #,has #,can #"				desc="true if this %object% %sName:LCase%"/>
				<If sName="are #,should #"					desc="true if %sName:LCase%"/>
				<If sName="# is #,# has #,# are #,# can #,# should #"
															desc="true if %sName:LCase%"/>
				<If sname="show,visible"					desc="true to show, false to hide"/>
				<If sname="show #,# visible"				desc="true to show, false to hide the %match:Sentence:LCase%"/>
				<If sname="hide,hidden"						desc="true to hide, false to show"/>
				<If sname="hide #,# hidden"					desc="true to hide, false to show the %match:Sentence:LCase%"/>

				<If sname="enable,enabled"					desc="true to enable, false to disable"/>
				<If sname="enable #,# enabled,# on"			desc="true to enable, false to disable the %match:Sentence:LCase%"/>
				<If sname="disable,disabled"				desc="true to disable, false to enable"/>
				<If sname="disable #,# disabled,# off"		desc="true to disable, false to enable the %match:Sentence:LCase%"/>

				<If sname="lock,locked"						desc="true to lock, false to unlock"/>
				<If sname="# lock,lock #,# locked"			desc="true to lock, false to unlock the %match:Sentence:LCase%"/>
				<If sname="unlock,unlocked"					desc="true to unlock, false to lock"/>
				<If sname="unlock #,# unlocked"				desc="true to unlock, false to lock the %match:Sentence:LCase%"/>

				<If sname="allow #,# allowed"				desc="true to allow, false to deny %match:Sentence:LCase%"/>
				<If sname="grant #,# granted"				desc="true to allow, false to deny %match:Sentence:LCase%"/>
				<If sname="deny #,# denied"					desc="true to deny, false to allow %match:Sentence:LCase%"/>

				<If sname="include,included"				desc="true to include, false to exclude"/>
				<If sname="include #,# included"			desc="true to include, false to exclude the %match:Sentence:LCase%"/>
				<If sname="exclude,excluded"				desc="true to exclude, false to include"/>
				<If sname="exclude #,# excluded"			desc="true to exclude, false to include the %match:Sentence:LCase%"/>

				<If sname="promote #,# promoted"			desc="true to promote, false to demote the %match:Sentence:LCase%"/>
				<If sname="demote #,# demoted"				desc="true to demote, false to promote the %match:Sentence:LCase%"/>

				<If sname="overwrite"						desc="true to overwrite, false to preserve"/>
				<If sname="overwrite all #,overwrite #"		desc="true to overwrite, false to preserve the %match:Sentence:LCase%"/>

				<If sname="delete all #,delete #,destroy all #destroy #"
															desc="true to delete the %match:Sentence:LCase%"/>

				<If sname="recurse,recursive,recurse #,recursive #,# recursively"
															desc="true to process recursively, false to process locally only"/>

				<If sname="loaded,saved,written,read"		desc="true if the data was %sName:LCase%"/>
				<If sname="changed,modified,updated"		desc="true if the data is %sName:LCase%"/>

				<If sName="# success,# succeeded,# successful,# ok"
															desc="true if the %match:LCase% operation was a success, false if it failed"/>
				<If sName="success,succeeded,successful,ok"	desc="true if the operation was a success, false if it failed"/>

				<If sName="select"							desc="true to select, false to deselect"/>
				<If sName="select #"						desc="true to select, false to deselect the %match:Sentence:LCase%"/>
				<If name="deselect"							desc="true to deselect, false to select"/>
				<If name="deselect#"						desc="true to deselect, false to select the %match:Sentence:LCase%"/>

				<If sName="including"						desc="true to include %match:Sentence:LCase%"/>

				<If sName="# mode"							desc="true to enable %sName:LCase%, false to disable it"/>

				<If name="#able">
					<IfNot sName="# table"					desc ="true if %sName:LCase%"/>
				</If>

				<If name="#ed"								desc ="true if %sName:LCase%"/>

				<Set										desc="true to %sName:LCase%"/>
			</If>

			<If sName="default #"							desc="The default %match:Sentence:LCase%"/>
			<If sName="number of #,number #,# count"		desc="Number of %match:Sentence:LCase:Plural%"/>
			<If sName="Initial size of #,Initial # size,Default size of #,Default # size,"
															desc="Initial size of the %match:Sentence:LCase%"/>
			<If sName="size of #,# size"					desc="Size of the %match:Sentence:LCase%"/>
			<If sName="type of #,# type"					desc="Type of the %match:Sentence:LCase%"/>
			<If sName="filename,file name"					desc="Filename of the file"/>
			<If sName="# filename,# file name"				desc="Filename of the %match:Sentence:LCase% file"/>
			<If sName="leafname,leaf name"					desc="Leafname of the file"/>
			<If sName="# leafname,# leaf name"				desc="Leafname of the %match:Sentence:LCase% file"/>
			<If sName="directory name,directory,dir name,dirname,dir path,dirpath"
															desc="Pathname of the directory"/>
			<If sName="folder name,foldername,folder,folderpath"
															desc="Pathname of the folder"/>
			<If sName="# folder name,# folder, #folder path"
															desc="Pathname of the %match:Sentence:LCase% folder"/>
			<If sName="# directory name,# directory,# directory path,# dir name,# dirname,# dir path"
															desc="Pathname of the %match:Sentence:LCase% directory"/>
			<If sName="path,pathname,path name,file path, filepath"
															desc="Full pathname of the file"/>
			<If name="lpszPathname"							desc="Full pathname of the file"/>
			<If sName="# pathname,# path name,#file path,# path"
															desc="Full pathname of the %match:Sentence:LCase% file"/>
			<If sName="# uri,# url"							desc="%namenp:LastWord:UCase% of the %match:Sentence:LCase%"/>
			<If sName="uri,url"								desc="%namenp:UCase% of the document"/>

			<If sName="in stream,input stream,load stream,read stream,source stream"
															desc="Stream to read data from"/>
			<If sName="out stream,output stream,save stream,write stream,destination stream"
															desc="Stream to write data to"/>

			<If sName="owner #"								desc="The %match:Sentence:LCase% that owns this item"/>
			<If sName="# owner"								desc="The owner of the %match:Sentence:LCase%"/>
			<If sName="# manager,manager #"					desc="Manager for %match:Sentence:LCase%"/>
			<If sName="# information,# description,# descriptor,# specifier,# data"
															desc="Information describing the %match:Sentence:LCase%"/>
			<If sName="information,description,data,descriptor,specifier"
															desc="The %sname:LCase%"/>
			<If sName="# manifest"							desc="A list of %match:Sentence:LCase:Plural%"/>
			<If sName="# message,# datagram,# packet"		desc="Message describing the %match:Sentence:LCase%"/>
			<If sName="# context"							desc="Context for the %match:Sentence:LCase%"/>
			<If sName="# count"								desc="Number of %match:Sentence:LCase:Plural%"/>
			<If sName="number,count,total,sum"				desc="Number of "/>
			<If sName="# by"								desc="Amount to %match:Sentence:LCase% by"/>
			<If sName="step,increment"						desc="Amount to increment by"/>
			<If sName="# options,# parameters,# preferences, settings"
															desc="Options for controlling the %match:Sentence:LCase%"/>
			<If sName="options,parameters,preferences,settings"
															desc="Options for controlling the operation"/>
			<If sName="# pattern,# match,# filter"			desc="A %sname:LastWord:LCase% specifying the %match:Sentence:LCase%"/>
			<If sName="pattern,match,filter"				desc="A %sname:LastWord:LCase% specifying the %match:Sentence:LCase%"/>
			<If sName="unique identifier"					desc="Unique identifier"/>
			<If sName="# unique identifier"					desc="Unique identifier for the %match:Sentence:LCase%"/>
			<If sName="# colour,# color"					desc="The %match:LCase% %sname:LastWord:LCase%"/>
			<If sName="start #,end #,projected start #,projected end #,estimated start #,estimated end #"
															desc="The %sName:LCase%"/>
			<If sName="# identifier"						desc="%sname:LastWord:SCase% for the %match:Sentence:LCase%"/>
			<If sName="# identifiers"						desc="List of %sname:LastWord:LCase% for the %match:Sentence:LCase:Plural%"/>
			<If sName="current #,active #,selected #"		desc="The %sname:LCase%"/>
			<If sName="# identifier,# length,# width,# height,# depth,# size,# extent,# extents,# name,# type,# date,# time,# duration,# state"
															desc="%sname:LastWord:SCase% of the %match:Sentence:LCase%"/>
			<If sName="# lengths,# widths,# heights,# depths,# sizes,# names,# types,# colors,# colours,# dates,# times,# durations,# states"
															desc="List of %sname:LastWord:LCase% of the %match:Sentence:LCase:Plural%"/>

			<If sName="# category,# group,# set,# categories,# groups,# sets"
															desc="%sname:LastWord:SCase% the %match:Sentence:LCase% belongs to"/>

			<If sName="length of #,width of #,height of #,depth of #,size of #,extent of #,extents of #,name of #,type of #,color of #,colour of #,date of #,time of #"
															desc="%sname:FirstWord:SCase% of the %match:Sentence:LCase%"/>
			<If sName="# buffer"							desc="%sname:LastWord:SCase% for %match:Sentence:LCase% data"/>
			<If sName="# list,# queue,# stack,# collection,# array,# dictionary"
															desc="%sname:LastWord:SCase% of %match:Sentence:LCase:Plural%"/>

			<If type="object" name="sender"					desc="Source of the event"/>
			<If type="#EventArgs"							desc="%match:Sentence:SCase% event information"/>
			<If type="EventArgs"							desc="Event information"/>
			<If type="CCmdUI*"								desc="An interface for setting and retrieving the UI state"/>

			<If type="XmlElement">
				<If sName="element"	 						desc="Element to process"/>
				<If sName="# xml"	 						desc="Element describing the %match:Sentence:LCase%"/>
				<If sName="# element"				 		desc="Element describing the %match:Sentence:LCase%"/>
				<Set										desc="Element describing the %sName:LCase%"/>
			</If>
			<If type="DateTime"								desc="Date/Time of the %sName:LCase%"/>
			<If type="#Exception"							desc="Details of the exception"/>
			<If type="WPARAM"								desc="The wParam field of the message"/>
			<If type="LPARAM"								desc="The lParam field of the message"/>

			<If sName="how #"								desc="Describes %sName:LCase%"/>

			<!-- Look for unit suffixes "LengthMetres", etc -->
			<If name="#s">
				<If sName="# in years,# in months,# in weeks,# in days,# in hours,# in minutes,# in seconds,# in milliseconds,# years,# months,# weeks,# days,# hours,# minutes,# seconds,# milliseconds"
																desc="The %match:LCase% in %name:LastWord:LCase%"/>
				<If sName="# in kilo bytes,# in mega bytes,# in giga bytes,# kilo bytes,# mega bytes,# giga bytes"
																desc="The %match:LCase% in %name:StripLastWord:LastWord:LCase%bytes"/>
				<If sName="# in bytes,# in kilobytes,# in megabytes,# in gigabytes,# bytes,# kilobytes,# megabytes,# gigabytes"
																desc="The %match:LCase% in %name:LastWord:LCase%"/>
				<If sName="# in millimeters,# in millimetres,# in centimeters,# in centimetres,# in meters,# in metres,# in kilometres,# in kilometers,# in yards,# in miles,# millimeters,# millimetres,# centimeters,# centimetres,# meters,# metres,# kilometres,# kilometers,# yards,# miles"
																desc="The %match:LCase% in %name:LastWord:LCase%"/>
				<If sName="# in degrees,# in radians,# degrees,# radians"
																desc="The %match:LCase% in %name:LastWord:LCase%"/>
				<If sName="# in pounds,# in tons,# in tonnes,# in kilograms,# pounds,# kilograms,# tons,# tonnes"
																desc="The %match:LCase% in %name:LastWord:LCase%"/>
			</If>

			<If type="params#,#params,#params#"				desc="A variable-length parameters list containing %sName:LCase%"/>

			<!-- Look for common lowercase prefixes -->
			<If sNameRaw="i #,# index"						desc="Zero-based index of the %match:Sentence:LCase%"/>
			<If name="i,index"								desc="Zero-based index of the "/>
			<If sName="# handle"							desc="Handle of the %match:Sentence:LCase%"/>
			<If type="HANDLE,HWND,HMENU,HEVENT,HGLOBAL,HLOCAL,HKEY,HBITMAP,HBRUSH,HTREEITEM,HCURSOR"
															desc="Handle of the %sName:Sentence:LCase%"/>

			<If sName="source #,destination #,target #"		desc="%sname:SCase%"/>
			<If sName="source,from"							desc="Source for the"/>
			<If sName="destination,target"					desc="%sName:SCase% for the"/>
			<If sName="format"								desc="Describes the format to use"/>
			<If sName="message,# message,text,# text,string,# string,question,# question,label,# label,title,# title,datagram,# datagram,packet,# packet"
															desc="The %sname:LCase%"/>
			<If type="button,checkbox,checkedlistbox,# combo,# combobox,# combo box,datetimepicker,label,linklabel,listbox,listview,maskedtextbox,monthcalendar,notifyicon,numericupdown,picturebox,progressbar,radiobutton,richtextbox,textbox,tooltip,treeview,webbrowser">
				<If sName="# button,# check box,# checkbox,# checkedlistbox,# checked list box,# combo,# combobox,# combo box,# datetimepicker,# date time picker,# linklabel,# link label,# listbox,# list box,# list view,# listview,# maskedtextbox,# masked text box,# monthcalendar,# month calendar,# notifyicon,# notify icon,# numericupdown,# numeric up down,# picturebox,# picture box,# progressbar,# progress bar,# radiobutton,# radio button,# richtextbox,# rich text box,# rich text,# textbox,# text box,# tooltip,# tool tip,# treeview,# tree view,# webbrowser,# web browser"
															desc="The %match:LCase% control"/>
				<Set										desc="The %sname:LCase% control"/>
			</If>

			<!-- Common single-character parameter names -->
			<If type="float,double">
				<If sName="x,y,z"							desc="The %name% coordinate"/>
				<If sName="w"								desc="The width"/>
				<If sName="h"								desc="The height"/>
			</If>

			<If type="byte,short,int,long,int16,int32,int64">
				<If name="i"								desc="The index"/>
				<If name="x,y,z"							desc="The %name% coordinate"/>
				<If name="w"								desc="The width"/>
				<If name="h"								desc="The height"/>
			</If>

			<If type="byte,char">
				<If name="b"								desc="The byte value"/>
				<If name="c"								desc="The character"/>
				<If name="r"								desc="The red component"/>
				<If name="g"								desc="The green component"/>
				<If name="b"								desc="The blue component"/>
				<If name="a"								desc="The alpha component"/>
			</If>

			<If type="string,CString">
				<If name="d"								desc="The description text"/>
				<If name="f"								desc="The format string"/>
				<If name="fn"								desc="The filename"/>
				<If name="m"								desc="The message text"/>
				<If name="q"								desc="The question text"/>
				<If name="s"								desc="The string"/>
			</If>

			<If name="x1"									desc="The first x value"/>
			<If name="x2"									desc="The second x value"/>
			<If name="y1"									desc="The first y value"/>
			<If name="y2"									desc="The second y value"/>
			<If name="z1"									desc="The first z value"/>
			<If name="z2"									desc="The second z value"/>
			<If name="w1"									desc="The first w value"/>
			<If name="w2"									desc="The second w value"/>

			<If numCharsInName="2">
				<If name="#1"								desc="The first %type%"/>
				<If name="#2"								desc="The second %type%"/>
				<If name="#3"								desc="The third %type%"/>
				<If name="#4"								desc="The fourth %type%"/>
				<If name="#5"								desc="The fifth %type%"/>
			</If>

			<If name="#1"									desc="The first %match:Sentence:LCase%"/>
			<If name="#2"									desc="The second %match:Sentence:LCase%"/>
			<If name="#3"									desc="The third %match:Sentence:LCase%"/>
			<If name="#4"									desc="The fourth %match:Sentence:LCase%"/>
			<If name="#5"									desc="The fifth %match:Sentence:LCase%"/>

			<If type="CDataExchange#"						desc="an object that manages the data exchange operation"/>

			<!-- Catch-alls. -->
			<If name="a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z"
															desc="The %type% to process"/>
			<Set											desc="The %sName:LCase%"/>
		</Variables>

		<Classes prefix="" suffix=".%ip%">
			<!-- Rules for auto-documentation of classes
				 Additional values that can be used for filtering/documenting include:
					name			The name of the class
					sName			The name of the class, converted to sentence (space separated words) format, with abbreviated words expanded
					sNameRaw		The name of the class without any prefix letters removed, converted to sentence
					numBases		The number of base classes/interfaces this class inherits from/implements
					baseNameX		Base class/interface name, where X is the 1-based index of the base (e.g. baseName1, baseName2)
					baseClass		The main base class that this class inherits from, or "unknown" if none/unknown
			 -->
			<!-- If this is an overide and the special 'docBasesWithSee' flag is set, we don't use
				 the standard documentation generation approach, but instead substitute a <see> reference.
				 Note that you also need to disable duplication of base documentation in the preferences to
				 allow this rule to be applied for overrides.
			-->
			<If docBasesWithSee="true">
				<IfNot baseClass="unknown">
					<Set									desc='See &lt;see cref="%baseClass%"/&gt;'/>
				</IfNot>
			</If>

			<If sName="# editing form,# editor form,# editing dialog,# editor dialog,# editing window,# editor window,# editing pane,# editor pane"
															desc="%name:LastWord:SCase% for editing the %match%"/>
			<If sName="# editor,# designer"					desc="%name:LastWord:SCase% for %match%"/>
			<If sName="# form,# dialog,# window,# pane,# panel,# wizard">
				<If sName="Set#"							desc="%name:LastWord:SCase% for setting the %match:StripLastWord:Sentence:LCase%"/>
				<If sName="Create#"							desc="%name:LastWord:SCase% for creating %match:StripLastWord:Sentence:Plural:LCase%"/>
				<If sName="Edit#"							desc="%name:LastWord:SCase% for editing the %match:StripLastWord:Sentence:LCase%"/>
				<If sName="Report#,Display#,Show#"			desc="%name:LastWord:SCase% for reporting information to the user"/>
				<If sName="Error#,Problem#"					desc="%name:LastWord:SCase% for reporting errors to the user"/>
				<If sName="Warning#"						desc="%name:LastWord:SCase% for reporting warnings to the user"/>
				<If sName="Progress#"						desc="%name:LastWord:SCase% for reporting task progress"/>
			</If>
			<If name="#Form,#Window"						desc="Form for viewing the %match:Sentence:LCase%"/>
			<If sName="# Dialog,# Wizard"					desc="%name:LastWord:SCase% for setting the %match:Sentence:LCase%"/>
			<If name="#Pane,#Panel"							desc="%name:LastWord:SCase% for editing the %match:Sentence:LCase%"/>
			<If name="#EventArgs"							desc="Additional information for %match:Sentence:LCase% events"/>
			<If sName="# Arguments"							desc="Arguments for %match:Sentence:LCase%"/>
			<If sName="# Attribute"							desc="Attribute for %match:Sentence:LCase%"/>
			<If sName="# Exception"							desc="Exception for signalling %match:Sentence:LCase% errors"/>
			<If name="#Permission"							desc="%match:Sentence:LCase% permission descriptor"/>
			<If sName="# Collection"						desc="Collection of %match:Sentence:LCase:Plural%"/>
			<If name="#List"								desc="List of %match:Sentence:LCase:Plural%"/>
			<If name="#Queue"								desc="Queue of %match:Sentence:LCase:Plural%"/>
			<If name="#Stack"								desc="Stack of %match:Sentence:LCase:Plural%"/>
			<If sName="# Dictionary"						desc="Dictionary of %match:Sentence:LCase:Plural%"/>
			<If sName="# Manager"							desc="Manager for %match:Sentence:LCase:Plural%"/>
			<If sName="# Information"						desc="Information about the %match:Sentence:LCase%"/>
			<If sName="# Manifest"							desc="A list of the %match:Sentence:LCase%"/>
			<If sName="# Description"						desc="Description of the %match:Sentence:LCase%"/>
			<If sName="# Buffer"							desc="Buffer for %match:Sentence:LCase%"/>

			<If sName="# information,# description"			desc="Information describing a %match:Sentence:LCase%"/>

			<!-- Catch-all. Just converts the element name into a sentence format -->
			<Set											desc="%sname:SCase%"/>
		</Classes>

		<Interfaces suffix=".%ip%">
			<!-- Rules for auto-documentation of interfaces
				 Additional values that can be used for filtering/documenting include:
					type			"interface" (all languages) or "annotation" (java)
			-->

			<!-- If this is an overide and the special 'docBasesWithSee' flag is set, we don't use
				 the standard documentation generation approach, but instead substitute a <see> reference.
				 Note that you also need to disable duplication of base documentation in the preferences to
				 allow this rule to be applied for overrides.
			-->
			<If docBasesWithSee="true">
				<IfNot baseClass="unknown">
					<Set									desc='See &lt;see cref="%baseClass%"/&gt;'/>
				</IfNot>
			</If>

			<Set											desc="%type:SCase% for " continue="y"/>
			<If name="IDisposable"							desc="objects that provide custom disposal implementations"/>
			<Set											desc="%sName:lCase%"/>
		</Interfaces>

		<Methods>
			<!-- Rules for auto-documentation of method/property/indexer names
				 Additional values that can be used for filtering/documenting include:
					name			The name of the method
					methodName		The name of the method
					sName			The name of the method, converted to sentence (space separated words) format, with abbreviated words expanded
					rawMethodName	The name of the method, including generic type parameters (e.g. name<A,B>)
					methodType		The type of the method (one of: method, property, indexer, delegate, eventhandler)
					specialType		Extra info on the method: normal, static, inline, abstract, virtual, override
					access			For .net languages and Java, the access (private, protected, internal, public)
					retType			The return type for this method (const int*)
					retTypeBase		The core return type for this method, without modifiers (int)
					numWordsInName	The number of words detected in 'name'
					numArgs			The number of arguments for this method
					argTypeX		Argument type, where X is the 1-based index of the argument (e.g. argType1, argType2)
					argTypeBaseX	Core argument type (without modifiers), where X is the 1-based index of the argument (e.g. argType1, argType2)
					argNameX		Argument name, where X is the 1-based index of the argument (e.g. argName1, argName2)
					signature		The argument signature of the method in a cref-compatible form, e.g. 'int,List{string},double'
					baseClass		"unknown", or where possible for an override method/property, the fully qualified name of the base
									class/interface being overridden
					
					getSet			(For methodType="property" or "indexer") the appropriate "Gets", "Sets", or "Gets or sets" text for this property/indexer
					eventSender		(For methodType="eventhandler" only) the sender of the event
					eventType		(For methodType="eventhandler" only) the type of the event
			 -->

			<!-- If this is an overide and the special 'docOverridesWithSee' flag is set, we don't use
				 the standard documentation generation approach, but instead substitute a <see> reference.
				 Note that you also need to disable duplication of base documentation in the preferences to
				 allow this rule to be applied for overrides.
			-->
			<If specialType="override" docOverridesWithSee="true">
				<IfNot baseClass="unknown">
					<If methodType="property"				desc='See &lt;see cref="%baseClass%.%methodName%"/&gt;'/>
					<If numArgs="0"							desc='See &lt;see cref="%baseClass%.%methodName%()"/&gt;'/>
					<Set									desc='See &lt;see cref="%baseClass%.%methodName%(%signature%)"/&gt;'/>
				</IfNot>
			</If>
			
			<If methodType="constructor">
				<If stylecop="true">
					<If specialType="static"		 		desc="Initializes static members of the %containingclass% class"/>
					<If numArgs="0" access="private"		desc="Prevents a default instance of the %containingclass% class from being created"/>
					<Set									desc="Initializes a new instance of the %containingclass% class"/>
				</If>

				<If specialType="static"			 		desc="Static constructor"/>
				<If numArgs="0">
					<If access="private"					desc="Constructor that prevents a default instance of this class from being created"/>
					<If access="protected"					desc="Specialised default constructor for use only by derived classes"/>
					<Set							 		desc="Default constructor"/>
				</If>
				<If numArgs="1">
					<If argType1="%containingclass%,%containingclass%#,# %containingclass%,# %containingclass%#">
						<If argType1="#&amp;&amp;"			desc="Move constructor"/>
						<Set desc="Copy constructor"/>
					</If>
				</If>

				<If access="protected"						desc="Specialised constructor for use only by derived classes"/>
				<Set										desc="Constructor"/>
			</If>

			<If methodType="destructor">
				<If stylecop="true"							desc="Finalizes an instance of the %containingclass% class"/>
				<Set										desc="Destructor"/>
			</If>
			<If methodType="finaliser">
				<If stylecop="true"							desc="Finalizes an instance of the %containingclass% class"/>
				<Set										desc="Finaliser"/>
			</If>

			<If methodType="indexer">
				<Set										desc="Indexer to %getSet% items within this collection using array index syntax"/>
			</If>

			<If methodType="property"						desc="%getSet% ">
				<If retType="bool,boolean" desc="a value indicating whether ">
					<If sname="is # registered,is # active,is # inactive,is # enabled,is # disabled,is # empty,is # open,is # closed,is # available,is # online,is # offline"
															desc="a %match:LCase% is %name:lastWord:LCase%"/>

					<If sname="is #,has #,contains #,use #,uses #"
															desc="this %object% %sname:LCase%"/>
					<If sname="are #,can #,should #,allow #,allows #"
															desc="we %sname:LCase%"/>

					<If sname="show,shown"					desc="this %object% is shown"/>
					<If sname="visible"						desc="this %object% is visible"/>
					<If sname="show #"						desc="the %match:Sentence:LCase% is shown"/>
					<If sname="# visible"					desc="the %match:Sentence:LCase% is visible"/>
					<If sname="hide,hidden"					desc="this %object% is hidden"/>
					<If sname="hide #,# hidden"				desc="the %match:Sentence:LCase% is hidden"/>

					<If sname="enable,enabled"				desc="this %object% is enabled"/>
					<If sname="enable #,# enabled"			desc="the %match:Sentence:LCase% is enabled"/>
					<If sname="disable,disabled"			desc="this %object% is disabled"/>
					<If sname="disable #,# disabled"		desc="the %match:Sentence:LCase% is disabled"/>

					<If sname="lock,locked"					desc="this %object% is locked"/>
					<If sname="# lock,lock #,# locked"		desc="the %match:Sentence:LCase% is locked"/>
					<If sname="unlock,unlocked"				desc="this %object% is unlocked"/>
					<If sname="unlock #,# unlocked"			desc="the %match:Sentence:LCase% is unlocked"/>

					<If sname="allow #,# allowed"			desc="%match:Sentence:LCase% is allowed"/>
					<If sname="grant #,# granted"			desc="%match:Sentence:LCase% is granted"/>
					<If sname="deny #,# denied"				desc="%match:Sentence:LCase% is denied"/>

					<If sname="overwrite"					desc="this %object% will overwrite"/>
					<If sname="overwrite all #,overwrite #"	desc="the %match:Sentence:LCase% will be overwritten"/>

					<If sname="delete all #,delete #,destroy all #destroy #"
															desc="the %match:Sentence:LCase% wil be deleted"/>

					<If sname="recurse,recursive,recurse #,recursive #,# recursively"
															desc="processing will act recursively"/>

					<If sname="saved,written,changed,modified,updated,clean,dirty"
															desc="this %object% is %sName:LCase%"/>
					<If sname="# loaded,# saved,# written,# read,# changed,# modified,# updated"
															desc="the %match:sentence:LCase% was %name:LastWord:LCase%"/>

					<If sname="load #,save #,import #,export #,refresh #,render #,attach #,flush #,clear #,open #,connect #"
															desc="the %match:sentence:LCase% should be %namenp:FirstWord:LCase%ed"/>
					<If sname="include #,calculate #,recalculate #"
															desc="the %match:sentence:LCase% should be %namenp:FirstWord:LCase%d"/>
					<If sname="force #,compute #,close #,change #"
															desc="the %match:sentence:LCase% should be %namenp:FirstWord:LCase%d"/>
					<If sname="redraw #,draw #"				desc="the %match:sentence:LCase% should be %namenp:FirstWord:LCase%n"/>
					<If sname="read #,set #"				desc="the %match:sentence:LCase% should be %namenp:FirstWord:LCase%"/>
					<If sname="modify #"					desc="the %match:sentence:LCase% should be modified"/>
					<If sname="write #"						desc="the %match:sentence:LCase% should be written"/>
					<If sname="get #,update #"				desc="or not to %namenp:FirstWord:LCase% the %match:sentence:LCase%"/>

					<If name="#able,#ible">	<!-- catch names like "editable" -->
						<IfNot sName="# table"				desc ="this %object% is %sName:LCase%"/>
					</If>

					<Set									desc="the %sname:LCase%"/>
				</If>

				<If sName="default #"						desc="the default %match:Sentence:LCase%"/>
				<If sName="number of #,number #,# count"	desc="the number of %match:Sentence:LCase:Plural%"/>
				<If sName="size of #,# size"				desc="the size of the %match:Sentence:LCase%"/>
				<If sName="type of #,# type"				desc="the type of the %match:Sentence:LCase%"/>
				<If sName="filename,file name"				desc="the filename of the file"/>
				<If sName="# filename,# file name"			desc="the filename of the %match:Sentence:LCase% file"/>
				<If sName="leafname,leaf name"				desc="the leafname of the file"/>
				<If sName="# leafname,# leaf name"			desc="the leafname of the %match:Sentence:LCase% file"/>
				<If sName="directory name,directory,dir name,dirname,dir path,dirpath"
															desc="the pathname of the directory"/>
				<If sName="folder name,foldername,folder"	desc="the pathname of the folder"/>
				<If sName="# folder name,# folder"			desc="the pathname of the %match:Sentence:LCase% folder"/>
				<If sName="# directory name,# directory,# dir name,# dirname"
															desc="the pathname of the %match:Sentence:LCase% directory"/>
				<If sName="path,pathname,path name,file path, filepath"
															desc="the full pathname of the file"/>
				<If sName="# pathname,# path name,#file path,# path"
															desc="the full pathname of the %match:Sentence:LCase% file"/>
				<If sName="# uri,# url"						desc="%name:LastWord:UCase% of the %match:Sentence:LCase%"/>
				<If sName="uri,url"							desc="%namenp:UCase% of the document"/>
				<If sName="# owner,owner #"					desc="the %match:Sentence:LCase% that owns this item"/>
				<If sName="# manager"						desc="the manager for %match:Sentence:LCase%"/>
				<If sName="# information,# description,# data"
															desc="the information describing the %match:Sentence:LCase%"/>
				<If sName="# manifest"						desc="a list of %match:Sentence:LCase:Plural%"/>
				<If sName="# message"						desc="a message describing the %match:Sentence:LCase%"/>
				<If sName="# context"						desc="a context for the %match:Sentence:LCase%"/>
				<If sName="# count"							desc="the number of %match:Sentence:LCase:Plural%"/>
				<If sName="number,count,total,sum"			desc="the number of "/>
				<If sName="# by"							desc="the amount to %match:Sentence:LCase% by"/>
				<If sName="step,increment,by"				desc="the amount to increment by"/>
				<If sName="# options,# parameters,# preferences, settings"
															desc="options for controlling the %match:Sentence:LCase%"/>
				<If sName="options,parameters,preferences,settings"
															desc="options for controlling the operation"/>
				<If sName="unique identifier"				desc="a unique identifier"/>
				<If sName="# unique identifier"				desc="a unique identifier of the %match:Sentence:LCase%"/>
				<If sName="current #,active #,selected #"	desc="The %sname:LCase%"/>
				<If sName="# identifier,# length,# width,# height,# depth,# size,# extent,# extents,# name,# type,# color,# colour,# date,# time,# duration,# state"
															desc="the %sname:LastWord:LCase% of the %match:Sentence:LCase%"/>
				<If sName="# identifiers,# lengths,# widths,# heights,# depths,# sizes,# names,# types,# colors,# colours,# dates,# times,# durations,# states"
															desc="a list of %sname:LastWord:LCase% of the %match:Sentence:LCase:Plural%"/>

				<If sName="# category,# group,# set,# categories,# groups,# sets"
															desc="the %sname:LastWord:LCase% the %match:Sentence:LCase% belongs to"/>

				<If sName="length of #,width of #,height of #,depth of #,size of #,extent of #,extents of #,name of #,type of #,color of #,colour of #,date of #,time of #"
															desc="the %sname:FirstWord:LCase% of the %match:Sentence:LCase%"/>
				<If sName="# buffer"						desc="the %sname:LastWord:LCase% for %match:Sentence:LCase% data"/>
				<If sName="# list,# queue,# stack,# collection,# array,# dictionary"
															desc="a %sname:LastWord:LCase% of %match:Sentence:LCase:Plural%"/>
				<If retType="XmlElement">
					<If sName="element"	 					desc="an element describing the "/>
					<If sName="# element" 					desc="an element describing the %match:Sentence:LCase%"/>
					<Set									desc="an element describing the %sName:LCase%"/>
				</If>
				
				<If retType="DateTime"						desc="the Date/Time of the %sName:LCase%"/>
				<If retType="#Exception"					desc="details of the exception"/>

				<!-- Look for common lowercase prefixes -->
				<If sName="# index"							desc="Zero-based index of the %match:Sentence:LCase%"/>
				<If sName="index"							desc="Zero-based index of this %object%"/>
				<If sName="# handle"						desc="Handle of the %match:Sentence:LCase%"/>

				<If sName="source #,destination #,target #"	desc="%sname:LCase%"/>
				<If sName="source,from"						desc="Source for the"/>
				<If sName="destination,target"				desc="%sName:SCase% for the"/>
				<If sName="format"							desc="the format to use"/>
				<If sName="message,# message,text,# text,string,# string,question,# question,label,# label,title,# title"
															desc="The %sname:LCase%"/>
				<If type="button,checkbox,checkedlistbox,# combo,# combobox,# combo box,datetimepicker,label,linklabel,listbox,listview,maskedtextbox,monthcalendar,notifyicon,numericupdown,picturebox,progressbar,radiobutton,richtextbox,textbox,tooltip,treeview,webbrowser">
					<If sName="# button,# check box,# checkbox,# checkedlistbox,# checked list box,# combo,# combobox,# combo box,# datetimepicker,# date time picker,# linklabel,# link label,# listbox,# list box,# list view,# listview,# maskedtextbox,# masked text box,# monthcalendar,# month calendar,# notifyicon,# notify icon,# numericupdown,# numeric up down,# picturebox,# picture box,# progressbar,# progress bar,# radiobutton,# radio button,# richtextbox,# rich text box,# rich text,# textbox,# text box,# tooltip,# tool tip,# treeview,# tree view,# webbrowser,# web browser"
															desc="The %match:LCase% control"/>
					<Set									desc="The %sname:LCase% control"/>
				</If>

				<Set										desc="the %sname:LCase%"/>
			</If>	<!-- Properties -->

			<If methodType="operator">
				<If name="+="								desc="Addition assignment operator"/>
				<If name="-="								desc="Subtraction assignment operator"/>
				<If name="*="								desc="Multiplication assignment operator"/>
				<If name="/="								desc="Division assignment operator"/>
				<If name="%="								desc="Modulus assignment operator"/>

				<If name="~="								desc="Bitwise 'ones complement' assignment operator"/>
				<If name="^="								desc="Bitwise 'exclusive or' assignment operator"/>
				<If name="&amp;="							desc="Bitwise 'and' assignment operator"/>
				<If name="|="								desc="Bitwise 'or' assignment operator"/>
				<If name="&lt;&lt;="						desc="Bitwise left shift assignment operator"/>
				<If name="&gt;&gt;="						desc="Bitwise right shift assignment operator"/>

				<If numArgs="0">
					<If name="-&gt;"						desc="Member dereference operator"/>
					<If name="-&gt;*"						desc="Indirect member dereference operator"/>
					<If name="&amp;"						desc="Reference operator"/>
					<If name="*"							desc="Indirection operator"/>
					<If name="#*"							desc="%name% casting operator"/>
					<If name="."							desc="Member access operator"/>
				</If>

				<If name="++"								desc="Increment operator"/>
				<If name="+"								desc="Addition operator"/>
				<If name="--"								desc="Decrement operator"/>
				<If name="-" numArgs="1" 					desc="Negation operator"/>
				<If name="-"								desc="Subtraction operator"/>
				<If name="*"								desc="Multiplication operator"/>
				<If name="/"								desc="Division operator"/>
				<If name="%"								desc="Modulus operator"/>

				<If name="~"								desc="Bitwise 'ones complement' operator"/>
				<If name="^"								desc="Bitwise 'exclusive or' operator"/>
				<If name="&amp;"							desc="Bitwise 'and' operator"/>
				<If name="|"								desc="Bitwise 'or' operator"/>
				<If name="&lt;&lt;"							desc="Bitwise left shift operator"/>
				<If name="&gt;&gt;"							desc="Bitwise right shift operator"/>

				<If name="!"								desc="Logical negation operator"/>
				<If name="&amp;&amp;"						desc="Logical 'and' operator"/>
				<If name="||"								desc="Logical 'or' operator"/>

				<If name="true"								desc="Boolean 'true' operator"/>
				<If name="false"							desc="Boolean 'false' operator"/>

				<If name="=="								desc="Equality operator"/>
				<If name="!="								desc="Inequality operator"/>
				<If name="&lt;"								desc="Less-than comparison operator"/>
				<If name="&lt;="							desc="Less-than-or-equal comparison operator"/>
				<If name="&gt;"								desc="Greater-than comparison operator"/>
				<If name="&gt;="							desc="Greater-than-or-equal comparison operator"/>

				<If name="=">
					<If argType1="#&amp;&amp;"				desc="Move assignment operator"/>
					<Set									desc="Assignment operator"/>
				</If>

				<If name="[]"								desc="Array indexer operator"/>
				<If name="()"								desc="Function call operator"/>
				<If name=","								desc="Comma operator"/>

				<If name="new"								desc="Object allocation operator"/>
				<If name="new[],new []"						desc="Array allocation operator"/>
				<If name="delete"							desc="Object de-allocation operator"/>
				<If name="delete[],delete []"				desc="Array de-allocation operator"/>

				<If name="operator#"						desc="%match% casting operator"/>
				<Set										desc="%name% casting operator"/>
			</If>

			<If retType="IEnumerable#">
				<If sname="List #,Enumerate #,Scan #,Traverse #,Find #,Search For #,Search #"
															desc="%namenp:FirstWord:Plural:SCase% %namenp:StripFirstWord:Sentence:LCase% in this collection"/>
				<Set										desc="Enumerates %sname:LCase% in this collection"/>
			</If>

			<If methodType="eventHandler" 					desc="Event handler. Called by %eventSender% for %eventType:Sentence:LCase% events"/>
			<If methodType="delegate" name="#EventHandler"	desc="Delegate for handling %match% events"/>

			<!-- Qt support -->
			<If retType="void">
				<If sname="signal #">
					<If numArgs="0"							desc="Raises a %match:Sentence:SCase% signal"/>
					<If numArgs="1"							desc="Raises a %match:Sentence:SCase% signal"/>
				</If>

				<If name="on_#">
					<If numArgs="0"							desc="Handles %match:Sentence:LCase% signals"/>
					<If numArgs="1"							desc="Handles %match:Sentence:LCase% signals"/>
				</If>
			</If>

			<If name="main,tmain,_main,_tmain"				desc="Main entry-point for this application"/>

			<If argType1="this #"							continue="y" desc="A %match% extension method that "/>

			<If numArgs="0">
				<If sName="Add #"							desc="Adds %match:Sentence:LCase%%ip%"/>
				<If sName="Minimum,Maximum,Average,Median,Mean"
															desc="Determines the %sname:LCase% value"/>
			</If>

			<!-- ReadSizeOf(Buffer DataBuffer) = "Read size of the data buffer" -->
			<If numArgs="1">
				<If sName="# Of"							desc="%sName:SCase% the given %argName1:Sentence:LCase%"/>
			</If>

			<If rettype="bool,boolean">
				<If sname="are #,can #,should #,allow #"
															desc="Determine if we %sname:LCase%"/>
			</If>

			<If numArgs="1,2,3">
				<If rettype="bool,boolean">
					<If sname="is # registered,is # active,is # inactive,is # enabled,is # disabled,is # empty,is # open,is # closed,is # available,is # online,is # offline"
															desc="Queries if a %match:LCase% is %name:lastWord:LCase%"/>

					<If name="Are#"							desc="Query if %match:Sentence:LCase% in '%argName1%'"/>
					<If name="Should#,Can#"					desc="Queries if we %sName:LCase% '%argName1%'"/>
					<If name="Is#,Contains#,Has#,Includes#,Does#"
															desc="Query if '%argName1%' %sName:LCase%"/>
				</If>

				<If sname="Add #">
					<If sname="Add To #"					desc="Adds to the %match:Sentence:LCase%.%ip%"/>
					<If sname="Add #"	numArgs="1"			desc="Adds a %match:Sentence:LCase%.%ip%"/>
					<If sname="Add #"	numArgs="2"			desc="Adds a %match:Sentence:LCase% to '%argName2%'"/>
				</If>

				<If sName="Clamp"							desc="%sName:SCase% the given %argName1:Sentence:LCase%"/>
				<If sName="Minimum,Maximum,Average,Median,Mean"
															desc="Determines the %sname:LCase% of the given parameters"/>
				<If sName="Recalculate #,Calculate #,Get #">
					<If sName="# Minimum,# Maximum,# Average,# Median,# Mean,# Range,# Standard deviation"
															desc="Finds the %namenp:StripFirstWord:LCase% of the given arguments"/>
				</If>
			</If>

			<If retType="bool,boolean">
				<If sname="is # registered,is # active,is # inactive,is # enabled,is # disabled,is # empty,is # open,is # closed,is # available,is # online,is # offline"
															desc="Queries if a %match:LCase% is %name:lastWord:LCase%"/>

				<If name="Are#"								desc="Query if %match:Sentence:LCase%"/>
				<If name="Should#,Can#"						desc="Queries if we %sName:LCase%"/>
				<If name="Is#,Contains#,Has#,Includes#"		desc="Query if this %object% %sName:LCase%"/>

				<If sname="Overlaps,Intersects,Covers,Hides,Collides#,Contains,Owns,Controls"
															desc="Query if this %object% %namenp:Sentence:LCase% the given %argName1%"/>
			</If>

			<If name="GetHashCode"							desc="Calculates the hash code for this %object%"/>

			<If sname="On #">
				<If sName="On Update #"							desc="Updates the user interface for the %match:Sentence:LCase% action"/>
				<If name="OnCreate" argType1="LPCREATESTRUCT"	desc="Called when this window is created"/>
				<If name="OnCommand" argType1="WPARAM"			desc="Handles windows WM_COMMAND messages"/>
				<If name="OnNotify" argType1="WPARAM"			desc="Handles windows WM_NOTIFY messages"/>
				<If name="OnPaint"								desc="Paints this window"/>
				<If name="OnInitDialog"							desc="Initialises this dialog and the controls within it"/>
				<If argtype1="EventArgs,#EventArgs"				desc="Raises the %match:Sentence:LCase% event"/>
				<If argtype2="EventArgs,#EventArgs"				desc="Raises the %match:Sentence:LCase% event"/>
				<If sName="On #"								desc="Executes the %match:Sentence:LCase% action"/>
			</If>
			<If name="Create,CreateEx" argType1="CWnd*"		desc="Creates the Window instance that will be represented by this %object%"/>
			<If name="DoDataExchange"						desc="Exchanges data to/from the controls in this dialog"/>
			<If name="PreTranslate#"						desc="Translates all %match:Sentence:LCase:Plural% before they are processed by the main message loop"/>

			<If sName="Calculate Number #,Compute Number #"	desc="Calculates the number of %match:Sentence:LCase%"/>
			<If sName="Recalculate #,Calculate #,Compute #" desc="Calculates the %match:Sentence:LCase%"/>
			<If sName="Generate #"							desc="Generates a %match:Sentence:LCase%"/>
			<If sName="Do #,Execute #,Run #,Launch #, Fork #"
															desc="Executes the %match:Sentence:LCase% operation"/>
			<If sName="Ensure #"							desc="Ensures that %match:Sentence:LCase%"/>
			<If sName="# Helper"							desc="Helper method that %match:Sentence:LCase%"/>

			<If numArgs="1" argType1="#EventArgs,EventArgs">
				<If sName="On#Event,Raise#Event,Fire#Event,Signal#Event"
															desc="Raises the %match:Sentence:LCase% event"/>
				<If sName="On #,Raise #,Fire #,Signal #"	desc="Raises the %match:Sentence:LCase% event"/>
			</If>
			<If sName="On#Event,Raise#Event,Fire#Event,Signal#Event"
														 	desc="Raises the %match:Sentence:LCase% event"/>
			<If sName="Raise #,Signal #"					desc="Raises the %match:Sentence:LCase% event"/>
			<If sName="Thread Pool Raise #"					desc="Raises the %match:Sentence:LCase% event on a thread-pool thread"/>

			<If sName="Invoke"								desc="Executes the given operation on a different thread, and waits for the result"/>
			<If sName="Invoke #"							desc="Executes the %match:Sentence:LCase% on a different thread, and waits for the result"/>
			<If sName="Begin Invoke"						desc="Executes the given operation on a different thread, asynchronously"/>
			<If sName="Begin Invoke #"						desc="Executes the %match:Sentence:LCase% on a different thread, asynchronously"/>

			<If name="Equals">
				<If numArgs="1"								desc="Tests if this %argType1% is considered equal to another"/>
				<If numArgs="2"								desc="Tests if two %argType1% objects are considered equal"/>
				<Set										desc="Tests if objects are considered equal"/>
			</If>

			<If sName="Compare,Compare To,Difference">
				<If numArgs="1"								desc="Compares this %argType1% object to another to determine their relative ordering"/>
				<If numArgs="2"								desc="Compares two %argType1% objects to determine their relative ordering"/>
				<Set										desc="Compares objects"/>
			</If>

			<If sName="Enqueue,En Queue,Add To Queue"		desc="Adds an object onto the end of this queue"/>
			<If sName="Dequeue,De Queue,Get head"			desc="Removes the head object from this queue"/>
			<If sName="Get #,Find #,Read #,Write #,Load #,Save #,Serialise #,Serialize #">
				<If sName="# Parent"						desc="%match:FirstWord:SCase:Plural% the parent of this item"/>
				<If sName="# Owner"							desc="%match:FirstWord:SCase:Plural% the owner of this item"/>
				<If sName="# Previous"						desc="%match:FirstWord:SCase:Plural% the previous item"/>
				<If sName="# Next"							desc="%match:FirstWord:SCase:Plural% the next item"/>
				<If sName="# First Child"					desc="%match:FirstWord:SCase:Plural% the first child of this item"/>
				<If sName="# Last Child"					desc="%match:FirstWord:SCase:Plural% the last child of this item"/>
				<If sName="# Child"							desc="%match:FirstWord:SCase:Plural% a child of this item"/>
				<If sName="# Children,# Subtree,# Sub Tree"	desc="%match:FirstWord:SCase:Plural% the children of this item"/>

				<If sName="Get Parent #"					desc="Gets the parent %match:LCase%"/>
				<If sName="Get Owner #"						desc="Gets the owner %match:LCase%"/>
				<If sName="Get Previous #"					desc="Gets the previous %match:LCase%"/>
				<If sName="Get Next #"						desc="Gets the next %match:LCase%"/>
				<If sName="Get Child #"						desc="Gets a child %match:LCase%"/>
				<If sName="Get First #"						desc="Gets the first %match:LCase%"/>
				<If sName="Get Last #"						desc="Gets the last %match:LCase%"/>
			</If>

			<If sName="Add Range"							desc="Adds a collection of objects to the end of this collection"/>

			<If name="StartUp"								desc="Prepares this %object% for use"/>
			<If name="ShutDown"								desc="Shuts down this %object% and frees any resources it is using"/>

			<If name="Serialise,Serialize,Deserialise,Deserialize"
															decs="%match% this %object% to the given stream" />

			<If sName="Register for #"						desc="Registers this %object% for %match:LCase%"/>
			<If sName="Deregister for #,Unregister for #"	desc="Deregisters this %object% for %match:LCase%"/>

			<If sName="To #">
				<If name="ToString"							desc="Convert this %object% into a string representation"/>
				<If name="ToArray"							desc="Convert this %object% into an array representation"/>
				<If name="ToBinary"							desc="Convert this %object% into a binary representation"/>
			</If>
			<If sName="To #,As #,Convert to #,Cast to #">
				<If numArgs="1"								desc="Converts a %argName1% to a %match:Sentence:LCase%"/>
				<Set										desc="Converts this %object% to a %match:Sentence:LCase%"/>
			</If>
			<If numArgs="1" sName="From #,Convert from #,Cast from #,Initialise From #,Initialize From #,Copy From #" 
															desc="Initializes this %object% from the given %sName:LCase%"/>

			<If sName="Delete #,Destroy #,Clear #,Reset #,Remove #,Unlink #,Delink #,Disconnect #,Pull #,Pop #,Extract #,Decompress #,Download #,Install #,Flush #,Apply #,Activate #,Update #,Copy #,Synchronize #,Synchronise #,Render #,Process #,Acquire #,Release #,Register #,Deregister #,Unregister #,Handle #,Paint #,Render #,Paste #,Pick #">
				<If numArgs="1"					 			desc="%sName:FirstWord:SCase:Plural% the %sName:StripFirstWord:LCase% described by %argName1%"/>
				<Set								 		desc="%sName:FirstWord:SCase:Plural% the %sName:StripFirstWord:Sentence:LCase%"/>
			</If>
			<If sName="Display #,Insert #">
				<If numArgs="1"					 			desc="%sName:FirstWord:SCase%s a %sName:StripFirstWord:LCase% described by %argName1%"/>
				<Set								 		desc="%sName:FirstWord:SCase%s a %sName:StripFirstWord:Sentence:LCase%"/>
			</If>

			<If sName="Prepend #,Append #,Add #,Push #,Upload #,Link #,Connect #,Write #,Save #,Dump #,Inform #,Notify #,Broadcast #,Send #,Post #">
				<If numArgs="0"						 		desc="%sName:FirstWord:SCase:Plural% the %sName:StripFirstWord:Sentence:LCase%"/>
				<Set								 		desc="%sName:FirstWord:SCase:Plural% a %sName:StripFirstWord:Sentence:LCase%"/>
			</If>

			<If sName="Find,Search,Index Of">
				<If numArgs="1"								desc="Searches for the first match for the given %argType1:Sentence:LCase%"/>
				<Set										desc="Searches for the first match"/>
			</If>
			<If sName="Find All #,Index Of All #"			desc="Searches for all %match:Sentence:LCase%"/>
			<If sName="Find Any,Index Of Any"				desc="Searches for any matches from the given list"/>
			<If sName="Find Any #,Index Of Any #"			desc="Searches for any %match:Sentence:LCase%"/>
			<If sName="Find First #,Index Of First #"		desc="Searches for the first %match:Sentence:LCase%"/>
			<If sName="Find Next #,Index Of Next #"			desc="Searches for the next %match:Sentence:LCase%"/>
			<If sName="Find Previous #,Index Of Previous #"	desc="Searches for the next %match:Sentence:LCase%"/>
			<If sName="Find Last #,Index Of Last #"			desc="Searches for the last %match:Sentence:LCase%"/>
			<If sName="Find Nearest #,Find Closest #"		desc="Searches for the nearest %match:Sentence:LCase%"/>
			<If sName="Find Furthest #,Find Farthest #"		desc="Searches for the furthest %match:Sentence:LCase%"/>
			<If sName="Find Newest #"						desc="Searches for the newest %match:Sentence:LCase%"/>
			<If sName="Find Oldest #"						desc="Searches for the oldest %match:Sentence:LCase%"/>
			<If sName="Find Largest #,Find Biggest #"		desc="Searches for the largest %match:Sentence:LCase%"/>
			<If sName="Find Smallest #"						desc="Searches for the smallest %match:Sentence:LCase%"/>
			<If sName="Find #,Search For #,Search #,Index Of #"
															desc="Searches for the first %match:Sentence:LCase%"/>

			<If sName="Reverse Find,Reverse Search,Last Index Of">
				<If numArgs="1"								desc="Searches for the last match for the given %argType1:Sentence:LCase%"/>
				<Set										desc="Searches for the last match"/>
			</If>
			<If sName="Reverse Find #,Reverse Search #,Last Index Of #"
															desc="Searches for the last %match:Sentence:LCase%"/>

			<If sName="Lookup,Look Up"						desc="Looks up a given key to find its associated value"/>
			<If sName="Lookup #,Look Up #"					desc="Looks up a given key to find its associated %match:Sentence:LCase%"/>

			<If sName="For,For Each,For All"				desc="Applies an operation to all items in this collection"/>

			<If sName="Initialise#,Initialize#"				desc="%sName:FirstWord:SCase:Plural% the %namenp:StripFirstWord:Sentence:LCase%"/>
			<If sName="Set up #,Setup #"					desc="Sets up the %match:Sentence:LCase%"/>
			<If sName="Reinitialise#,Reinitialize#"			desc="%namenp:FirstWord:SCase:Plural% the %namenp:StripFirstWord:Sentence:LCase%"/>
			<If sName="Declare #"							desc="Declares the %match:Sentence:LCase%"/>
			<If sName="Connect to#,Connect#"				desc="Connect to the %match:Sentence:LCase%"/>
			<If sName="Disconnect from#,Disconnect#"		desc="Disconnect from the %match:Sentence:LCase%"/>
			<If name="#Callback,#Upcall,#Handler"			desc="%name:LastWord:SCase%, called when the %match:Sentence:LCase%"/>
			<If sName="Test if #"							desc="Tests if the %match:Sentence:LCase%"/>
			<If sName="# Test,Test #"						desc="Tests %match:Sentence:LCase%"/>
			<If sName="Ready to #"							desc="Query if we are ready to %match:Sentence:LCase%"/>

			<If sName="Log in,Log on,Log off,Log out,Login,Logon,Logoff,Logout"
															desc="%sName:SCase%"/>

			<If sName="Get X #,Get Y #,Get Z #"				desc="%sName:SCase%"/>
			<If numArgs="0" sName="Build #,Create #,Make #,Open #,Close #,Write #,Save #,Read #,Load #,Dump #,Scan #,Report #,Log #,Get #,Put #,Set #,Fetch #,Store #,Return #,Retrieve #,Locate #,Query #,Download #,# Down Load,Upload #"
															desc="%namenp:FirstWord:SCase:Plural% the %match:Sentence:LCase%"/>
			<If sName="Build #,Create #,Make #,Open #,Close #,Write #,Save #,Read #,Load #,Dump #,Scan #,Report #,Log #,Get #,Put #,Set #,Fetch #,Store #,Return #,Retrieve #,Locate #,Query #,Download #,# Down Load,Upload #,Start #,Stop #,End #,Begin #,Finish #,Split #"
															desc="%namenp:FirstWord:SCase:Plural% a %match:Sentence:LCase%"/>
			<If sName="New #"								desc ="Creates a %sName:LCase%"/>

			<If sName="show #,hide #,enable #,disable #,lock #,unlock #,promote #,demote #"
															desc="%namenp:FirstWord:Plural:SCase% the %match:Sentence:LCase%"/>
			<If sName="grant #,deny #"						desc="%namenp:FirstWord:Plural:SCase% %match:Sentence:LCase%"/>

			<If sName="# exists,# is writable,# is readable,# open"
															desc="Queries if a given %sName:LCase%"/>
			<If numWordsInName="1">
				<If name="Deinitialise,Deinitialize"		desc="De-initialises this %object% and frees any resources it is using"/>
				<If name="Register"							desc="Registers this %object%"/>
				<If name="Deregister,Unregister"			desc="Deregisters this %object%"/>
				<If sName="Add"								desc="Adds %argName1%%ip%. "/>
				<If sName="Prepend,Append">
					<If numArgs="0"							desc="%namenp:SCase:Plural%"/>
					<Set									desc="%namenp:SCase:Plural% a %argName1%"/>
				</If>
				<If sName="Clear"							desc="Clears this %object% to its blank/initial state"/>
				<If sName="Clone,Duplicate"					desc="Makes a deep copy of this %object%"/>
				<If sName="Contains"						desc="Determines if this collection contains a given object"/>
				<If sName="Dispose"							desc="Dispose of this %object%, cleaning up any resources it uses"/>
				<If sName="Peek"							desc="Returns the top-of-stack object without removing it"/>
				<If sName="Pop"								desc="Removes and returns the top-of-stack object"/>
				<If sName="Push"							desc="Pushes an object onto this stack"/>
				<If sName="Initialise,Initialize"			desc="%sName:FirstWord:SCase:Plural% this %object%"/>
				<If sName="Create"							desc="Creates this %object%"/>
				<If sName="Delete,Destroy,Clear,Reset,Remove,Unlink,Delink,Disconnect,Pull,Pop,Extract,Decompress,Download,Install,Flush,Apply,Activate,Update,Copy,Synchronize,Synchronise,Render,Process">
					<If numArgs="1"					 		desc="%sName:SCase:Plural% the given %argName1%"/>
					<Set								 	desc="%sName:SCase:Plural% this %object%"/>
				</If>
				<If sName="Send,Post"						desc="%namenp:SCase% this message"/>
				<If sName="Display">
					<If numArgs="1"					 		desc="%sName:SCase%s the given %argName1%"/>
					<Set								 	desc="%sName:SCase%s this %object%"/>
				</If>

				<If numArgs="0">
					<If	retType="bool,boolean" 				desc="%namenp:Plural:Sentence:SCase% this %object%"/>
					<IfNot retType="void"					desc="Gets the %SName:LCase%"/>
					<Set									desc="%namenp:Plural:Sentence:SCase% this %object%"/>
				</If>

				<If argName1="file,fname,path,file#,path#"	desc="%sName:Plural:SCase% the given file"/>
				<If argName1="uri,url"						desc="%sName:Plural:SCase% the given document"/>

				<Set			 							desc="%namenp:Plural:Sentence:SCase%"/>
			</If>

			<If numArgs="0">
				<If	retType="bool,boolean"					desc="Determines if we can %namenp:Sentence:LCase%"/>
				<IfNot retType="void"						desc="Gets the %SName:LCase%"/>
			</If>

			<Set											desc="%sName:SCase%"/>
		</Methods>

		<MethodReturns> <!-- prefix="%containingClass% returns "> -->
			<!-- Rules used for method/property return values
				 Additional values that can be used for filtering/documenting include:
					name			The name of the method owning the return type
					sName			The name of the method, converted to sentence (space separated words) format, with abbreviated words expanded
					methodName		The name of the method
					methodType		The type of the method (one of: method, property, indexer, delegate)
					numArgs			The numbe rof arguments to the method
					argTypeN		The type of argument 'N' (1, 2, 3...)
					argTypeBaseN	The type of argument 'N' (1, 2, 3...)
					argNameN		The name of argument 'N' (1, 2, 3...)

					type			The return type for the method ("const int*") (without a namespace)
					typeBase		The return type for the method, not including any modifiers ("int")
					retType			The return type for the method, including namespace if supplied (witout a namespace)
					retTypeBase		The return type for the method, not including any modifiers, with namespace
					isPointer		"y" or "n", indicating if the return type includes a "*"
					isReference		"y" or "n", indicating if the return type includes an "&" or "ref"
			 -->

			<If sName="Minimum,Maximum,Average,Median,Mean"	desc="The %sname:LCase% value"/>

			<If methodType="method">
				<If sName="To #">
					<If numArgs="0"							desc="This %object% as a %retType%"/>
					<If numArgs="1"							desc="%argName1% as a %retType%"/>
					<Set									desc="The given data converted to a %retType%"/>
				</If>

				<If sname="Create #"						desc="The new %match:Sentence:LCase%"/>

				<If isPointer="y"							continue="y" desc="null if it fails, else "/>

				<If retType="IEnumerable#">
					<If sname="List #,Enumerate #,Scan #,Traverse #,Find #,Search #"
															desc="An enumerator that allows foreach to be used to %namenp:Sentence:LCase% in this collection"/>
					<Set									desc="An enumerator that allows foreach to be used to process %sname:LCase% in this collection"/>
				</If>

				<If retType="bool,boolean">
					<If sName="Contains"					desc="true if the object is in this collection, false if not"/>
					<If sname="is # registered,is # active,is # inactive,is # enabled,is # disabled,is # empty,is # open,is # closed,is # available,is # online,is # offline"
															desc="true if a %match:LCase% is %name:lastWord:LCase%, false if not"/>
					<If sName="Equals"						desc="true if the objects are considered equal, false if they are not"/>
					<If sName="Is #,Has #,Are #"			desc="true if %match:Sentence:LCase%, false if not"/>
					<If sname="Can #,Allow #"				desc="true if we %sname:firstWord:lcase% %match:LCase%, false if not"/>
					<If sName="Test #,# Test"				desc="true if the test passes, false if the test fails"/>
					<If sName="Matches #,Equals #"			desc="true if %sName:LCase%, false if not"/>
					<Set									desc="true if it succeeds, false if it fails"/>
				</If>

				<If sName="Get Hash Code"					desc="The hash code for this %object%"/>
				<If sName="To String"						desc="A string representation of this %object%"/>
				<If sName="To Array"						desc="An array representation of this %object%"/>
				<If sName="Clone,Duplicate"					desc="A copy of this %object%"/>
				<If sName="Pop"								desc="The previous top-of-stack object"/>
				<If sName="Peek"							desc="The current top-of-stack object"/>
				<If sName="Dequeue,De Queue"				desc="The head object from this queue"/>
				<If sName="Compare To"						desc="Negative if this %object% is less than the other, 0 if they are equal, or positive if this is greater"/>
				<If sName="Compare"							desc="Negative if '%argName1%' is less than '%argName2%', 0 if they are equal, or positive if it is greater"/>
				<If sName="Format"							desc="The formatted value"/>
				<If sName="Format #"						desc="The formatted %match:Sentence:LCase%"/>
				<If sName="Sort"							desc="The sorted values"/>
				<If sName="Sort #"							desc="The sorted %match:Sentence:LCase%"/>
				<If sName="Extract #"						desc="The extracted %match:Sentence:LCase%"/>

				<If name="Main"								desc="Exit-code for the process - 0 for success, else an error code"/>
				<If name="OnInitDialog"						desc="TRUE if the focus has been left alone, FALSE if it has been set into a control"/>

				<If sname="Recalculate #,Calculate #,Get #,Compute #,Accumulate #">
					<If sName="# Minimum,# Maximum,# Average,# Median,# Mean,# Range,# Standard deviation"
															desc="The calculated %sname:StripFirstWord:LCase%"/>
				</If>

				<If sName="Get X #,Get Y #,Get Z #"			desc="The %sName:LCase:StripFirstWord%"/>
				<If sName="Get #,Fetch #,Return #,Query #,Read #,Load #,Generate #"
															desc="The %match:Sentence:LCase"/>
				<If sName="Find #,Search #">
					<If sName="Find First #,Find Next #,Find Previous #,Find Last #,Find Nearest #,Find Closest #,Find Furthest #,Find Farthest #,Find Newest #,Find Oldest #,Find Largest #,Find Biggest #,Find Smallest #,Find #,Search For #,Search #"
															desc="The found %match:Sentence:LCase%"/>
				</If>
				<If sName="Index of Any #,Last Index Of Any #,Index Of #,Last Index Of #"
															desc="The zero-based index of the found %match:Sentence:LCase%, or -1 if no match was found"/>

				<If sName="Recalculate #,Calculate #,Compute #,Accumulate #"
															desc="The calculated %match:Sentence:LCase%"/>
				<If sName="Convert To #">
					<If numArgs="0"							desc="%object% converted to a %match:Sentence:LCase%"/>
					<Set									desc="The given data converted to a %match:Sentence:LCase%"/>
				</If>

				<If sName="Convert #">
					<If numArgs="0"							desc="%object% converted to a %match:Sentence:LCase%"/>
					<Set									desc="The %match:FirstWord:LCase% converted %match:StripFirstWord:Sentence:LCase%"/>
				</If>

				<If retType="#List#,#Collection#"			desc="A list of "/>

				<If methodName="TotalOf#,Total#,NumberOf#,NumOf#,Number#,Num#,CountOf#,Count#,Sum,#SumOf#"
															desc="The total number of %match:Sentence:LCase%"/>

				<If retType="HANDLE,HGLOBAL,HLOCAL"			desc="The handle of the "/>
				<If retType="HWND"							desc="The handle of the window"/>
				<If retType="HMENU"							desc="The handle of the menu"/>
				<If retType="HEVENT"						desc="The handle of the event"/>
				<If retType="HKEY"							desc="The handle of the registry key"/>
				<If retType="HBITMAP"						desc="The handle of the image"/>
				<If retType="HBRUSH"						desc="The handle of the brush"/>
				<If retType="HTREEITEM"						desc="The handle of the tree item"/>
				<If retType="HCURSOR"						desc="The handle of the cursor"/>

				<Set										desc=""/>
			</If>

			<If methodType="property">
				<If retType="bool,boolean">
					<If sname="is # registered,is # active,is # inactive,is # enabled,is # disabled,is # empty,is # open,is # closed,is # available,is # online,is # offline"
															desc="true if a %match:LCase% is %name:lastWord:LCase%, false if not"/>
					<If methodName="Is#,Has#"				desc="true if this %object% %methodName:Sentence:LCase%, false if not"/>
					<If methodName="Are#,Can#,Should#,Must#"
															desc="true if we %methodName:Sentence:LCase%, false if not"/>
					<Set									desc="true if %sName:LCase%, false if not"/>
				</If>

				<If methodName="TotalOf#,Total#,NumberOf#,NumOf#,Number#,Num#,CountOf#,Count#,Sum#,SumOf#"
															desc="The total number of %match:Sentence:LCase%"/>

				<If sName="default #"						desc="The default %match:Sentence:LCase%"/>
				<If sName="number of #,number #,# count"	desc="The number of %match:Sentence:LCase:Plural%"/>
				<If sName="size of #,# size"				desc="The size of the %match:Sentence:LCase%"/>
				<If sName="type of #,# type"				desc="The type of the %match:Sentence:LCase%"/>
				<If sName="# filename,# file name"			desc="The filename of the %match:Sentence:LCase% file"/>
				<If sName="# leafname,# leaf name"			desc="The leafname of the %match:Sentence:LCase% file"/>
				<If sName="directory name,directory,dir name,dirname,dir path,dirpath"
															desc="The pathname of the directory"/>
				<If sName="folder name,foldername,folder"	desc="The pathname of the folder"/>
				<If sName="# folder name,# folder"			desc="The pathname of the %match:Sentence:LCase% folder"/>
				<If sName="# directory name,# directory,# dir name,# dirname"
															desc="The pathname of the %match:Sentence:LCase% directory"/>
				<If sName="path,pathname,path name,file path, filepath"
															desc="The full pathname of the file"/>
				<If sName="# pathname,# path name,#file path,# path"
															desc="The full pathname of the %match:Sentence:LCase% file"/>
				<If sName="# information,# description,# data"
															desc="Information describing the %match:Sentence:LCase%"/>
				<If sName="# manifest"						desc="A list of %match:Sentence:LCase:Plural%"/>
				<If sName="# message"						desc="A message describing the %match:Sentence:LCase%"/>
				<If sName="# count"							desc="The number of %match:Sentence:LCase:Plural%"/>
				<If sName="# by"							desc="The amount to %match:Sentence:LCase% by"/>
				<If sName="step,increment"					desc="The amount to increment by"/>
				<If sName="# options,# parameters,# preferences"
															desc="Options that control the %match:Sentence:LCase%"/>
				<If sName="# unique identifier"				desc="Unique identifier of the %match:Sentence:LCase%"/>
				<If sName="# identifier,# length,# width,# height,# depth,# size,# extent,# extents,# name,# type,# color,# colour,# date,# time"
															desc="The %sname:LastWord:LCase% of the %match:Sentence:LCase%"/>
				<If sName="# identifiers,# lengths,# widths,# heights,# depths,# sizes,# names,# types,# colors,# colours,# dates,# times"
															desc="A list of %sname:LastWord:LCase% of the %match:Sentence:LCase:Plural%"/>
				<If sName="# identifier list,# length list,# width list,# height list,# depth list,# size list,# name list,# type list,# color list,# colour list,# date list,# time list"
															desc="The %sname:StripLastWord:LastWord:LCase:Plural% of the %match:Sentence:LCase:Plural%"/>

				<If sName="length of #,width of #,height of #,depth of #,size of #,extent of #,extents of #,name of #,type of #,color of #,colour of #,date of #,time of #"
															desc="The %sname:FirstWord:SCase% of the %match:Sentence:LCase%"/>
				<If sName="# buffer,# bucket"				desc="A %sname:LastWord:SCase% for %match:Sentence:LCase% data"/>
				<If sName="# list,# queue,# stack,# collection,# array,# dictionary"
															desc="A %sname:LastWord:SCase% of %match:Sentence:LCase:Plural%"/>

				<Set										desc="The %methodName:Sentence:LCase%"/>
			</If>

			<If methodType="indexer">
				<Set										desc="The indexed item"/>
			</If>

			<If methodType="delegate">
				<Set										desc=""/>
			</If>

			<If methodType="operator">
				<If methodName="&lt;&lt;,&gt;&gt;"			desc="The shifted result"/>

				<If methodName="!"							desc="The logical inverse of this value"/>

				<If methodName="true"						desc="true if this %object% is in a 'true' state, else false"/>
				<If methodName="false"						desc="true if this %object% is in a 'false' state, else false"/>

				<If methodName="=="							desc="true if the parameters are considered equivalent"/>
				<If methodName="!="							desc="true if the parameters are not considered equivalent"/>
				<If methodName="&lt;"						desc="true if the first parameter is less than the second"/>
				<If methodName="&lt;="						desc="true if the first parameter is less than or equal to the second"/>
				<If methodName="&gt;"						desc="true if the first parameter is greater than to the second"/>
				<If methodName="&gt;="						desc="true if the first parameter is greater than or equal to the second"/>

				<If methodName="-&gt;"						desc="The dereferenced object"/>
				<If name="[]"								desc="The indexed value"/>

				<If methodName="="							desc="A shallow copy of this %object%"/>

				<If name="new,new[],new []"					desc="The allocated memory"/>

				<Set										desc="The result of the operation"/>
			</If>

		</MethodReturns>

		<Parameters>
			<!-- Rules used for parameters
				 Additional values that can be used for filtering/documenting include:
					name			The name of the parameter
					sName			The name of the parameter, converted to sentence (space separated words) format, with abbreviated words expanded
					type			The type of the parameter (const int*)
					typeBase		The type of the parameter, not including any modifiers (int)
					index			The 1-based index of the parameter within the method's parameter list
					word1			The first word of the parameter (often used for prefixes, e.g. m_, lpsz, etc)
					coreName		The name with the first word removed (to allow processing of prefixed names)
					isPointer		"y" or "n", indicating if the parameter type includes a "*" or "^"
					isReference		"y" or "n", indicating if the parameter type includes an "&" or "ref"
					isOut			"y" or "n", indicating if the parameter type includes an "out"
					isOptional		"y" or "n", indicating if the parameter is optional
					methodName		The name of the method for which this is a parameter
					numArgs			The total number of arguments for the method
			 -->

			<If type="#..." desc="Variable arguments providing " continue="y"/>	<!-- Java varargs -->

			<If type="this #"								desc="The %name% to act on"/>
			<If isOptional="y"								continue="yes"	desc="(optional) "/>

			<If methodName="Main">
				<If type="int"	 							desc="Number of command-line arguments"/>
				<Set										desc="Array of command-line argument strings"/>
			</If>

			<If name="result,pResult" isPointer="y"			desc="[out] if non-null, the result"/>

			<!-- Augment the description for ref/out/pointer parameters, and keep executing If commands -->
			<IfNot type="const#,#const#">
				<If isReference="y"							continue="yes" desc="[in,out] "/>
				<If isPointer="y"							continue="yes" desc="[in,out] If non-null, "/>
			</IfNot>
			<If isOut="y"									continue="yes" desc="[out] "/>

			<If name="other">
				<If methodName="Copy,Clone,Duplicate,Copy#,Clone#,Duplicate#"
															desc="Another instance to copy"/>
				<If methodName="Compare,Compare#"			desc="Another instance to compare"/>
			</If>

			<If type="#EventArgs,EventArgs" methodName="On#,Raise#,Fire#,Signal#"
															desc="Event information to send to registered event handlers"/>

			<If type="bool,boolean">
				<If methodName="Dispose" name="disposing"	desc="true if resources should be disposed, false if not"/>
			</If>

			<If methodName="Equals,Compare">
				<If numArgs="1" 							desc="The %type:Sentence:LCase% to compare to this %object%"/>
				<Set										desc="%type:Sentence:SCase% to be compared"/>
			</If>

			<If methodName="CompareTo"						desc="%type:Sentence:SCase% to compare to this"/>

			<If numArgs="1">
				<If methodName="AddRange"					desc="A %type% of items to append to this"/>
				<If methodName="Contains"					desc="The %type% to test for containment"/>
				<IfNot type="#const#">
					<If methodName="Push,Pop,Peek,Add,Append,Remove,Destroy,Delete,Link,Unlink,Delink,Connect,Disconnect,Write,Save,Read,Load,Dump,Scan,Get,Put,Set,Fetch,Store,Return,Retrieve"
															desc="The %type% to %methodName:Sentence:LCase%"/>
				</IfNot>
			</If>

			<!-- Parameters for binary operators -->
			<If numArgs="2">
				<If methodName="+">
					<If index="1" desc="The first value"/>
					<If index="2" desc="A value to add to it"/>
				</If>
				<If methodName="-">
					<If index="1" desc="The first value"/>
					<If index="2" desc="A value to subtract from it"/>
				</If>
				<If methodName="*">
					<If index="1" desc="The first value to multiply"/>
					<If index="2" desc="The second value to multiply"/>
				</If>
				<If methodName="/,%">
					<If index="1" desc="The numerator"/>
					<If index="2" desc="The denominator"/>
				</If>
				<If methodName="&amp;">
					<If index="1" desc="A bitfield to process"/>
					<If index="2" desc="A mask of bits to apply to the bitfield"/>
				</If>
				<If methodName="|">
					<If index="1" desc="A bitfield to process"/>
					<If index="2" desc="One or more bits to OR into the bitfield"/>
				</If>
				<If methodName="^">
					<If index="1" desc="A bitfield to process"/>
					<If index="2" desc="One or more bits to XOR against the bitfield"/>
				</If>
				<If methodName="&gt;,&lt;,&gt;=,&lt;=,==,!=">
					<If index="1" desc="The first instance to compare"/>
					<If index="2" desc="The second instance to compare"/>
				</If>
			</If>

			<Execute rules="Variables"/>					<!-- Execute the Variable documenting rules -->
		</Parameters>

		<TypeParameters>
			<!-- Rules used for generic type parameters
				 Additional values that can be used for filtering/documenting include:
					name			The name of the type parameter
					sName			The name of the type parameter, converted to sentence (space separated words) format, with abbreviated words expanded
			 -->

			<If name="T,T1,T2,T3,T4,U,V,I,J,K,X,Y,Z"		desc="Generic type parameter"/>

			<Set desc="Type of the %sName:LCase%"/>
		</TypeParameters>

		<WordExpansions>
			<!--
				Expansions for abbreviated single words. Must be in lowercase.
				You can match several abbreviations for the same word by separating them with commas.

				If you wish, you can use this feature to delete unwanted words (typically prefixes/suffixes).
				Just set desc="-" for any matching entries you wish to remove from the documentation.

				Note: AtomineerUtils can only match one abbreviation, so in cases where two or more
				meanings exist for one abbreviation (e.g. "doc" -> "document" or "delete on completion",
				you either have to expand to one form (and get it wrong sometimes) or delete the expansion
				entirely (and get it wrong always!). This is the reason why a few common abbreviations are
				not expanded by default - there are several possoble expansions, and AtomineerUtils has no
				way of knowing which one is correct.
			-->

			<If name="a#">
				<If name="acct"									desc="account"/>
				<If name="accts"								desc="accounts"/>
				<If name="ack"									desc="acknowledge"/>
				<If name="alg"									desc="algorithm"/>
				<If name="alt"									desc="alternate"/>
				<If name="addr"									desc="address"/>
				<If name="adv"									desc="advance"/>
				<If name="agg"									desc="aggregate"/>
				<If name="alloc"								desc="allocate"/>
				<If name="alt"									desc="alternate"/>
				<If name="ang"									desc="angle"/>
				<If name="ani,anim"								desc="animation"/>
				<If name="app"									desc="application"/>
				<If name="arg"									desc="argument"/>
				<If name="ar"									desc="archive"/>
				<If name="args"									desc="arguments"/>
				<If name="asc"									desc="ascending"/>
				<If name="assoc"								desc="associated"/>
				<If name="async"								desc="asynchronous"/>
				<If name="attr,attrib"							desc="attribute"/>
				<If name="attrs,attribs"						desc="attributes"/>
				<If name="auth" 								desc="authorisation"/>
				<If name="auto" 								desc="automatic"/>
				<If name="aux"	 								desc="auxilliary"/>
				<If name="avg" 									desc="average"/>
			</If>
			<If name="b#">
				<If name="bal"									desc="balance"/>
				<If name="bak"									desc="backup"/>
				<If name="blk"									desc="block"/>
				<If name="bot"									desc="bottom"/>
				<If name="bbox" 								desc="bounding box"/>
				<If name="bg,bgnd"								desc="background"/>
				<If name="bk,blk" 								desc="block"/>
				<If name="buf,buff"								desc="buffer"/>
				<If name="bmp" 									desc="bitmap"/>
				<If name="br" 									desc="line break"/>
				<If name="brg" 									desc="bearing"/>
				<If name="brk" 									desc="break"/>
				<If name="btn" 									desc="button"/>
			</If>
			<If name="c#">
				<If name="calc" 								desc="calculate"/>
				<If name="cam"									desc="camera"/>
				<If name="cap"									desc="capability"/>
				<If name="caps"									desc="capabilities"/>
				<If name="cat"									desc="category"/>
				<If name="cats"									desc="categories"/>
				<If name="cbl"									desc="cable"/>
				<If name="cbo"									desc="combobox"/>
				<If name="ceil"									desc="ceiling"/>
				<If name="chk" 									desc="check"/>
				<If name="chan,chnl" 							desc="channel"/>
				<If name="char,chr"								desc="character"/>
				<If name="chars,chrs"							desc="characters"/>
				<If name="clk"									desc="clock"/>
				<If name="clr"									desc="colour"/>
				<If name="cmd" 									desc="command"/>
				<If name="cmn"									desc="common"/>
				<If name="cmp" 									desc="compare"/>
				<If name="coll" 								desc="collection"/>
				<If name="coop" 								desc="cooperative"/>
				<If name="comm,comms" 							desc="communications"/>
				<If name="comp"									desc="component"/>
				<If name="compat"								desc="compatible"/>
				<If name="concat" 								desc="concatenate"/>
				<If name="cond" 								desc="condition"/>
				<If name="config,cfg" 							desc="configuration"/>
				<If name="conn" 								desc="connection"/>
				<If name="const" 								desc="constant"/>
				<If name="cont" 								desc="container"/>
				<If name="conv" 								desc="convert"/>
				<If name="coord" 								desc="coordinate"/>
				<If name="cos" 									desc="cosine"/>
				<If name="cpy"									desc="copy"/>
				<If name="cfg"									desc="configuration"/>
				<If name="cm" 									desc="centimetres"/>
				<If name="cmp" 									desc="compare"/>
				<If name="cnt" 									desc="count"/>
				<If name="cr" 									desc="carriage return"/>
				<If name="crlf" 								desc="newline"/>
				<If name="cs" 									desc="create struct"/>
				<If name="csr,curs"								desc="cursor"/>
				<If name="ctor" 								desc="constructor"/>
				<If name="ctr" 									desc="counter"/>
				<If name="ctl,ctrl" 							desc="control"/>
				<If name="ctls,ctrls" 							desc="controls"/>
				<If name="ctx" 									desc="context"/>
				<If name="cum" 									desc="cumulative"/>
				<If name="cur" 									desc="current"/>
				<If name="cust" 								desc="customer"/>
			</If>
			<If name="d#">
				<If name="db,dbase"								desc="database"/>
				<If name="dbl"									desc="double"/>
				<If name="dbg" 									desc="debug"/>
				<If name="dbgr" 								desc="debugger"/>
				<If name="dc,cdc" 								desc="device-context"/>
				<If name="dec,decr" 							desc="decrement"/>
				<If name="decl" 								desc="declaration"/>
				<If name="defn" 								desc="definition"/>
				<If name="deg,degs" 							desc="degrees"/>
				<If name="del" 									desc="delete"/>
				<If name="delim" 								desc="delimiter"/>
				<If name="denom" 								desc="denominator"/>
				<If name="deref" 								desc="dereference"/>
				<If name="desc,descr"							desc="description"/>
				<If name="dest,dst"								desc="destination"/>
				<If name="dev"									desc="development"/>
				<If name="dgram"								desc="datagram"/>
				<If name="dib"									desc="bitmap"/>
				<If name="diag,dgrm" 							desc="diagram"/>
				<If name="dict" 								desc="dictionary"/>
				<If name="diff" 								desc="difference"/>
				<If name="dist" 								desc="distance"/>
				<If name="dlg" 									desc="dialog"/>
				<If name="dload" 								desc="download"/>
				<If name="doc" 									desc="document"/>
				<If name="docs" 								desc="documents"/>
				<If name="dof" 									desc="degree of freedom"/>
				<If name="drv,drvr" 							desc="driver"/>
				<If name="dtor" 								desc="destructor"/>
				<If name="dup"									desc="duplicate"/>
				<If name="dword" 								desc="double-word"/>
				<If name="dyn"									desc="dynamic"/>
			</If>
			<If name="e#">
				<If name="elem" 								desc="element"/>
				<If name="elim" 								desc="eliminate"/>
				<If name="emu"	 								desc="emulate"/>
				<If name="enc"	 								desc="encode"/>
				<If name="env"	 								desc="environment"/>
				<If name="eor"									desc="exclusive-or"/>
				<If name="err" 									desc="error"/>
				<If name="esc" 									desc="escape"/>
				<If name="evt" 									desc="event"/>
				<If name="ext" 									desc="extent"/>
				<If name="exe"									desc="executable"/>
				<If name="exec" 								desc="execute"/>
				<If name="exp" 									desc="exponent"/>
				<If name="expr" 								desc="expression"/>
				<If name="extn" 								desc="extension"/>
			</If>
			<If name="f#">
				<If name="fg,fore" 								desc="foreground"/>
				<If name="fld" 									desc="field"/>
				<If name="flav" 								desc="flavor"/>
				<If name="flt,fltr"								desc="filter"/>
				<If name="fmt" 									desc="format"/>
				<If name="fname" 								desc="filename"/>
				<If name="fn" 									desc="function"/>
				<If name="frag"									desc="fragment"/>
				<If name="frm"									desc="form"/>
				<If name="fs" 									desc="file system"/>
				<If name="func" 								desc="function"/>
				<If name="fw" 									desc="firmware"/>
				<If name="fwd" 									desc="forward"/>
			</If>
			<If name="g#">
				<If name="gb" 									desc="gigabytes"/>
				<If name="gen" 									desc="generate"/>
				<If name="geom" 								desc="geometry"/>
				<If name="gfx" 									desc="graphics"/>
				<If name="grad" 								desc="graduated"/>
				<If name="grd"									desc="grid"/>
				<If name="grp"									desc="group"/>
				<If name="gui" 									desc="graphical user interface"/>
				<If name="guid" 								desc="unique identifier"/>
			</If>
			<If name="h#">
				<If name="hdg" 									desc="heading"/>
				<If name="hdr" 									desc="header"/>
				<If name="heir" 								desc="heirarchy"/>
				<If name="hdlr"									desc="handler"/>
				<If name="hex" 									desc="hexadecimal"/>
				<If name="hnd,hndl"								desc="handle"/>
				<If name="horz" 								desc="horizontal"/>
				<If name="ht" 									desc="height"/>
				<If name="hw" 									desc="hardware"/>
			</If>
			<If name="i#">
				<If name="ico" 									desc="icon"/>
				<If name="id,ident" 							desc="identifier"/>
				<If name="ids,idents" 							desc="identifiers"/>
				<If name="idx" 									desc="index"/>
				<If name="iface" 								desc="interface"/>
				<If name="img" 									desc="image"/>
				<If name="impl" 								desc="implementation"/>
				<If name="inc,incr"								desc="increment"/>
				<If name="incl" 								desc="include"/>
				<If name="info" 								desc="information"/>
				<If name="init,ini" 							desc="initialise"/>
				<If name="inits" 								desc="initialises"/>
				<If name="ins" 									desc="insert"/>
				<If name="inst" 								desc="instance"/>
				<If name="inv" 									desc="inverse"/>
				<If name="io" 									desc="I/O"/>
				<If name="it,iter" 								desc="iterator"/>
				<If name="ix"									desc="index"/>
			</If>
			<If name="j#">
				<If name="jmp" 									desc="jump"/>
			</If>
			<If name="k#">
				<If name="kb" 									desc="kilobytes"/>
				<If name="kbd" 									desc="keyboard"/>
				<If name="kilos,kg,kgs" 						desc="kilograms"/>
				<If name="km,kms"		 						desc="kilometres"/>
				<If name="kmh"			 						desc="kilometres per hour"/>
			</If>
			<If name="l#">
				<If name="lbl"		 							desc="label"/>
				<If name="lcase"	 							desc="lowercase"/>
				<If name="lb"									desc="pound"/>
				<If name="lbs"									desc="pounds"/>
				<If name="loc,locn" 							desc="location"/>
				<If name="ldr" 									desc="loader"/>
				<If name="len" 									desc="length"/>
				<If name="lerp" 								desc="linearly interpolate"/>
				<If name="lf" 									desc="line feed"/>
				<If name="ln" 									desc="line"/>
				<If name="lnk" 									desc="link"/>
				<If name="lp" 									desc="pointer to a"/>
				<If name="lhs" 									desc="left hand side"/>
				<If name="lib" 									desc="library"/>
				<If name="lst" 									desc="list"/>
				<If name="lvl,lev"								desc="level"/>
				<If name="lyr"									desc="layer"/>
			</If>
			<If name="m#">
				<If name="math,maths"							desc="mathematics"/>
				<If name="mb"									desc="megabytes"/>
				<If name="mbox"									desc="mailbox"/>
				<If name="mdl"									desc="model"/>
				<If name="mgr,man,mngr"							desc="manager"/>
				<If name="mgt,mgmt"								desc="management"/>
				<If name="max" 									desc="maximum"/>
				<If name="mem" 									desc="memory"/>
				<If name="mid" 									desc="middle"/>
				<If name="millisecs"							desc="milliseconds"/>
				<If name="min" 									desc="minimum"/>
				<If name="mm" 									desc="millimetres"/>
				<If name="mod" 									desc="modifier"/>
				<If name="mon,mntr" 							desc="monitor"/>
				<If name="ml" 									desc="miles"/>
				<If name="mph" 									desc="miles per hour"/>
				<If name="ms" 									desc="milliseconds"/>
				<If name="mtbf" 								desc="mean time between failures"/>
				<If name="msg" 									desc="message"/>
				<If name="mtg" 									desc="meeting"/>
				<If name="mult"									desc="multiply"/>
				<If name="mux" 									desc="multiplexer"/>
			</If>
			<If name="n#">
				<If name="norm" 								desc="normalise"/>
				<If name="num,nbr" 								desc="number"/>
				<If name="nc" 									desc="non-client"/>
				<If name="nl,newl" 								desc="newline"/>
				<If name="nxt" 									desc="next"/>
			</If>
			<If name="o#">
				<If name="obj" 									desc="object"/>
				<If name="objs" 								desc="objects"/>
				<If name="oct" 									desc="octal"/>
				<If name="ofd"									desc="open file dialog"/>
				<If name="op" 									desc="operation"/>
				<If name="opt" 									desc="option"/>
				<If name="opts" 								desc="options"/>
				<If name="orig" 								desc="original"/>
				<If name="os" 									desc="operating system"/>
				<If name="ownr" 								desc="owner"/>
			</If>
			<If name="p#">
				<If name="pal" 									desc="palette"/>
				<If name="param" 								desc="parameter"/>
				<If name="params" 								desc="parameters"/>
				<If name="ptn,partn"							desc="partition"/>
				<If name="pat,patt"								desc="pattern"/>
				<If name="pats,patts"							desc="patterns"/>
				<If name="pbm"									desc="portable bitmap"/>
				<If name="perm"									desc="permission"/>
				<If name="perms"								desc="permissions"/>
				<If name="perf"									desc="performance"/>
				<If name="pg"									desc="page"/>
				<If name="phys"									desc="physical"/>
				<If name="pic"									desc="picture"/>
				<If name="pkg"									desc="package"/>
				<If name="pkt"									desc="packet"/>
				<If name="pkts"									desc="packets"/>
				<If name="plist" 								desc="point list"/>
				<If name="pos,posn" 							desc="position"/>
				<If name="poly" 								desc="polygon"/>
				<If name="pred" 								desc="predicate"/>
				<If name="pref" 								desc="preference"/>
				<If name="prefs" 								desc="preferences"/>
				<If name="premult"								desc="pre-multiply"/>
				<If name="prev" 								desc="previous"/>
				<If name="prim" 								desc="primitive"/>
				<If name="prims" 								desc="primitives"/>
				<If name="prod" 								desc="product"/>
				<If name="prods" 								desc="products"/>
				<If name="proj" 								desc="project"/>
				<If name="prop" 								desc="property"/>
				<If name="props" 								desc="properties"/>
				<If name="proto" 								desc="prototype"/>
				<If name="pt,pnt" 								desc="point"/>
				<If name="pth"	 								desc="path"/>
				<If name="ptp,p2p"								desc="peer-to-peer"/>
				<If name="pts" 									desc="points"/>
				<If name="ptr" 									desc="pointer"/>
				<If name="pw,pwd" 								desc="password"/>
				<If name="pwr" 									desc="power"/>
			</If>
			<If name="q#">
				<If name="q"	 								desc="quarter"/>
				<If name="quat" 								desc="quaternion"/>
				<If name="quest" 								desc="question"/>
				<If name="qword" 								desc="quad-word"/>
				<If name="qy,qry"								desc="query"/>
			</If>
			<If name="r#">
				<If name="rad,rads" 							desc="radians"/>
				<If name="rbn" 									desc="ribbon"/>
				<If name="rc,rct,rect" 							desc="rectangle"/>
				<If name="rcv"									desc="receive"/>
				<If name="rdo"									desc="radio"/>
				<If name="rdr"									desc="reader"/>
				<If name="rec"									desc="record"/>
				<If name="recip"								desc="reciprocal"/>
				<If name="recs"									desc="records"/>
				<If name="recd"									desc="received"/>
				<If name="ref" 									desc="reference"/>
				<If name="refs" 								desc="references"/>
				<If name="reg" 									desc="register"/>
				<If name="regex,regexp"							desc="regular expression"/>
				<If name="reinit" 								desc="reinitialise"/>
				<If name="recalc" 								desc="recalculate"/>
				<If name="reconn" 								desc="reconnect"/>
				<If name="rel" 									desc="relative"/>
				<If name="res,rsrc" 							desc="resource"/>
				<If name="resn" 								desc="reservation"/>
				<If name="rev" 									desc="reverse"/>
				<If name="rgn" 									desc="region"/>
				<If name="rhs" 									desc="right hand side"/>
				<If name="rnd,rand"								desc="random"/>
				<If name="rng" 									desc="random number generator"/>
				<If name="rpt" 									desc="repeat"/>
				<If name="rq,req" 								desc="request"/>
				<If name="rst" 									desc="reset"/>
				<If name="rsvd" 								desc="reserved"/>
				<If name="rt" 									desc="right"/>
				<If name="rm" 									desc="remove"/>
				<If name="rx" 									desc="receive"/>
			</If>
			<If name="s#">
				<If name="sc,scr,scrn"							desc="screen"/>
				<If name="sbar"									desc="scrollbar"/>
				<If name="scrl"									desc="scroll"/>
				<If name="sec"									desc="security"/>
				<If name="seg"									desc="segment"/>
				<If name="segs"									desc="segments"/>
				<If name="sel,seld"								desc="selected"/>
				<If name="secs"									desc="seconds"/>
				<If name="sep"									desc="separator"/>
				<If name="seps"									desc="separators"/>
				<If name="seq"									desc="sequence"/>
				<If name="seql"									desc="sequential"/>
				<If name="seqs"									desc="sequences"/>
				<If name="sfd"									desc="save file dialog"/>
				<If name="sht"									desc="sheet"/>
				<If name="sgnl,sig"								desc="signal"/>
				<If name="sigs"									desc="signals"/>
				<If name="sim"									desc="simulation"/>
				<If name="sin"									desc="sine"/>
				<If name="sln,seln" 							desc="selection"/>
				<If name="soln" 								desc="solution"/>
				<If name="spd"									desc="speed"/>
				<If name="spec"									desc="specifier"/>
				<If name="src" 									desc="source"/>
				<If name="std"									desc="standard"/>
				<If name="stmt" 								desc="statement"/>
				<If name="str" 									desc="string"/>
				<If name="struct" 								desc="structure"/>
				<If name="succ" 								desc="successor"/>
				<If name="svr,srv,srvr" 						desc="server"/>
				<If name="sw" 									desc="software"/>
				<If name="sym" 									desc="symbol"/>
				<If name="sync,synch"							desc="synchronise"/>
				<If name="syncs,synchs"							desc="synchronises"/>
				<If name="sys" 									desc="system"/>
				<If name="sn" 									desc="serial number"/>
				<If name="sz" 									desc="size"/>
			</If>
			<If name="t#">
				<If name="tan" 									desc="tangent"/>
				<If name="tb" 									desc="terabytes"/>
				<If name="tbl" 									desc="table"/>
				<If name="tbar,tbr" 							desc="toolbar"/>
				<If name="tech" 								desc="technology"/>
				<If name="temp,tmp" 							desc="temporary"/>
				<If name="tfer" 								desc="transfer"/>
				<If name="tm" 									desc="time"/>
				<If name="tmr" 									desc="timer"/>
				<If name="tol" 									desc="tolerance"/>
				<If name="tot" 									desc="total"/>
				<If name="tri" 									desc="triangle"/>
				<If name="trunc"								desc="truncate"/>
				<If name="tx" 									desc="transmit"/>
				<If name="txt" 									desc="text"/>
			</If>
			<If name="u#">
				<If name="ui" 									desc="user interface"/>
				<If name="ucase" 								desc="uppercase"/>
				<If name="udate,upd" 							desc="update"/>
				<If name="util" 								desc="utility"/>
				<If name="utils" 								desc="utilities"/>
			</If>
			<If name="v#">
				<If name="val"									desc="value"/>
				<If name="var"									desc="variable"/>
				<If name="vars"									desc="variables"/>
				<If name="vec"									desc="vector"/>
				<If name="vel"	 								desc="velocity"/>
				<If name="ver,vsn"								desc="version"/>
				<If name="vert" 								desc="vertical"/>
				<If name="vol"	 								desc="volume"/>
				<If name="vtx"	 								desc="vertex"/>
				<If name="va"	 								desc="variable arguments"/>
				<If name="val"	 								desc="value"/>
				<If name="vm"	 								desc="virtual memory"/>
				<If name="vw"	 								desc="view"/>
			</If>
			<If name="w#">
				<If name="warn" 								desc="warning"/>
				<If name="win,wnd"								desc="window"/>
			</If>
			<If name="x#">
				<If name="xfm,xform"							desc="transform"/>
				<If name="xmit"									desc="transmit"/>
				<If name="xmitter"								desc="transmitter"/>
				<If name="xor"									desc="exclusive-or"/>
				<If name="xref"									desc="cross-reference"/>
				<If name="xtn"									desc="extension"/>
			</If>

			<If name="x"									desc="x coordinate"/>
			<If name="y"									desc="y coordinate"/>
			<If name="z"									desc="z coordinate"/>
		</WordExpansions>

		<Prefixes>
			<!--
				Processing for removal of prefixes. Must be in lowercase.
				
				These rules are only applied to the first word in a symbol made up of multiple words.
				(Note that single-letter prefixes are automatically stripped, so don't need to be
				explicitly included in these rules).

				These rules should return desc="-" to strip out unwanted prefixes.

				The default rules are based on typical MFC prefixes.
			-->
			<If name="sz,psz,lpsz,str,lpstr,lpcstr,us"		desc="-"/>
			<If name="lp,pp"								desc="-"/>
			<If name="dw,qw"								desc="-"/>
			<If name="si,li,ui,uc,uint,bool,fp"				desc="-"/>
			<If name="fn,st"								desc="-"/>
			<If name="ch,cb,ub,sb"							desc="-"/>
			<If name="afx,hwnd"								desc="-"/>
			<If name="rw,rg"								desc="-"/>
			<If name="bln,dbl,sng,lng,udt,vnt"				desc="-"/>
		</Prefixes>
	</AutoDoc>

	<Conversions>
		<!--
		Doc-comment Conversion Rules
		============================
		
		AtomineerUtils is capable of converting between different comment styles/skins and also 
		between DocXML, Doxygen and JavaDoc comment formats.

		[Note that at this time, the primary conversion process that is supported is Doxygen/JavaDoc
		to DocXML, simply because there has so far been no demand to convert DocXML the other way.
		However, basic conversions are already in place to convert from DocXml if required. Please
		email support@atomineerutils.com if you encounter any markup that is not converted well,
		and where possible we will try to upgrade AtomineerUtils to support your conversion needs]

		To convert between Doc Comment styles/formats, you may do any of the following:

		1) To convert between different block format "skins", set the Alt-Separator, Alt-LineHeader
		   and Alt-SeparatorB preferences in your Prefs.xml so that AtomineerUtils knows what the
		   'old' comment format looks like. (See the User Manual for details)

		2) Set your Doxygen or DocXML templates up to indicate the 'legal' entries in your new comment
		   format, and how they should be ordered within the new comment block. Any entries that have
		   the same tag in both old and new formats (e.g. param -> param) will be automatically
		   'converted' (reformatted in the new style). Any entries that are not considered 'legal'
		   by AtomineerUtils will be marked as 'deleted' with a ### prefix.

		3) Common Doxygen/DocXml markup is automatically converted.
		   e.g. \c ClassName         ->  <see cref="ClassName"/>
		        \code ... \endcode   ->  <code> ... </code>

		4) Where an old entry should be removed entirely, add an entry like this within this
		   <Conversions> section:
		        <ingroup convertTo=""/>            - delete all '\ingroup' entries

		5) Where an old entry needs to be renamed, add an entry like this:
		        <author convertTo="programmer"/>   - convert all '<author>' entries to '@programmer'

		6) A special pair of commands can be used to convert simple plain-text lists into a set of tags, e.g.
		   e.g. To convert:
				@references
					- \c MyClass
					- \c BaseClass

		   into a set of separate entries, you can use two forms:
				<references convertEachLineTo="seealso cref" stripPrefix="-" /> will produce:		   
					<seealso cref='MyClass'/>
					<seealso cref='BaseClass'/>

				<references convertEachLineTo="seealso" stripPrefix="- \c" /> will produce:
					<seealso>MyClass</seealso>
					<seealso>BaseClass</seealso>
		-->
	</Conversions>

	<Preprocess>
		<!--
			Macro-based preprocessing rules
			===============================

			When replacing an existing DocComment, AtomineerUtils can optionally call a user-defined
			Visual Studio macro to allow the comment to be pre-processed. This allows legacy comments
			to be parsed and converted into a DocXml or Doxygen format to allow AtomineerUtils to
			read the old documentation and convert it into the configured format. In addition, a
			conversion process can be executed on any code following the comment (for example,
			extracting end-of-line parameter comments and inserting them into the existing comment
			block).
			
			To use this preprocessor, set up the Alternate separator and line-header preferences
			to match the legacy comment style, and enter the full name of the macro you wish to
			execute here.
			
			When AtomineerUtils finds an existing comment during execution of 'Add Doc Comment', it
			will set the ActiveDocument's selection to the comment text (including the top and bottom
			separators) and then call this macro before it processes the comment text. You Macro can
			therefore parse and update the comment to be in a roughly AtomineerUtils-compatible format,
			so that AtomineerUtils can complete the conversion to your currently configured format.
			
			Note: It is recommended that you only enable this feature while converting old comments,
			and then disable it in normal use, as it slows down comment processing and causes a
			flashing effect in your document as the text is selected and deselected.
		-->
		<!-- <ConvertComment macro="Macros.AtomineerUtils.Custom.ConvertExistingComment"/> -->


		<!--
			Regular expression preprocessing rules
			======================================

			In certain circumstances, AtomineerUtils will apply a list of .Net regular expression
			replacements to text strings as a preprocessing step. This can be used to "tidy up"
			text before the auto-doc engine acts on it, to help AtomineerUtils parse it better
			(a typical use is to replace in-house types, typedefs or Macros that AtomineerUtils
			doesn't understand with something simpler, so that AtomineerUtils handles them better)
			
			Each <Replace> element should supply pattern="" and replacement="" attributes, which
			will be processed as the parameters to the .Net RegEx.Replace() method. If any change
			is caused by the regex, then an option attribute continue="true|false" can be used
			to allow or stop further regex replacements being made.
		-->
		<MethodDecl>
			<!--
				Preprocessing rules for Method declarations. The entire declaration
					e.g. "static int MyMethod(int parameter)"
				is passed through any .Net regular expression replacements specified below.
			
				Examples: Replace a typedef/macro return type or parameter with a simple type.
					<Replace pattern="OurTrueFalseType" replacement="bool" continue="true"/>
					<Replace pattern="OUR_TYPE\(bool\)" replacement="bool" continue="true"/>
			-->
		</MethodDecl>
	</Preprocess>
</Rules>
